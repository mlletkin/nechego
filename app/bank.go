package app

import (
	"errors"
	"fmt"

	tele "gopkg.in/telebot.v3"
)

const bank = "üè¶ *–ë–∞–Ω–∫:* –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ %s\n\n" +
	"_–°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞: `!–æ–±–Ω–∞–ª`\\._\n" +
	"_–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç: `!–¥–µ–ø–æ–∑–∏—Ç`\\._\n" +
	"_–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: %s_"

func (a *App) handleBank(c tele.Context) error {
	return c.Send(fmt.Sprintf(bank,
		formatMoney(getUser(c).Account),
		formatMoney(bankFee)),
		tele.ModeMarkdownV2)
}

const deposit = "üí≥ –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥ –∏ –ø–æ–ª–æ–∂–∏–ª–∏ %s –≤ –±–∞–Ω–∫\\.\n\n_–¢–µ–ø–µ—Ä—å –Ω–∞ —Å—á–µ—Ç—É %s_"

func (a *App) handleDeposit(c tele.Context) error {
	user := getUser(c)
	amount, err := moneyArgument(c)
	if amount == 0 || err != nil {
		return err
	}
	amount, err = amountAfterBankFee(amount)
	if err != nil {
		return userError(c, err.Error())
	}
	ok := a.model.Deposit(user, amount, bankFee)
	if !ok {
		return userError(c, notEnoughMoney)
	}
	return c.Send(fmt.Sprintf(deposit, formatMoney(amount), formatMoney(user.Account+amount)),
		tele.ModeMarkdownV2)
}

const withdraw = "üí≥ –í—ã —Å–Ω—è–ª–∏ %s —Å–æ —Å—á–µ—Ç–∞\\.\n\n_–¢–µ–ø–µ—Ä—å –≤ –∫–æ—à–µ–ª—å–∫–µ %s_"

func (a *App) handleWithdraw(c tele.Context) error {
	user := getUser(c)
	amount, err := moneyArgument(c)
	if amount == 0 || err != nil {
		return err
	}
	ok := a.model.Withdraw(user, amount, 0)
	if !ok {
		return userError(c, notEnoughMoney)
	}
	return c.Send(fmt.Sprintf(withdraw, formatMoney(amount), formatMoney(user.Balance+amount)),
		tele.ModeMarkdownV2)
}

func amountAfterBankFee(amount int) (int, error) {
	amount = amount - bankFee
	if amount <= 0 {
		return 0, errors.New(notEnoughMoney)
	}
	return amount, nil
}
