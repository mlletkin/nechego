package app

import (
	"errors"
	"fmt"
	"nechego/model"

	tele "gopkg.in/telebot.v3"
)

const bank = "üè¶ *–ë–∞–Ω–∫:* –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ %s\n\n" +
	"_–°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞: `!–æ–±–Ω–∞–ª`\\._\n" +
	"_–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç: `!–¥–µ–ø–æ–∑–∏—Ç`\\._\n\n" +
	"_%s_\n\n" +
	"_–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç: `!–∫—Ä–µ–¥–∏—Ç`\\._\n" +
	"_–ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç: `!–ø–æ–≥–∞—Å–∏—Ç—å`\\._\n" +
	"_–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: %s_\n" +
	"_–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç: %s_\n" +
	"_–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: %s_\n"

func (a *App) handleBank(c tele.Context) error {
	user := getUser(c)
	return c.Send(fmt.Sprintf(bank,
		formatMoney(user.Account),
		debtStatus(user),
		formatRatio(debtFee),
		formatMoney(user.DebtLimit),
		formatMoney(bankFee)),
		tele.ModeMarkdownV2)
}

func debtStatus(u model.User) string {
	if !u.Debtor() {
		return "–£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤\\."
	}
	return fmt.Sprintf("–í—ã –¥–æ–ª–∂–Ω—ã –±–∞–Ω–∫—É %s", formatMoney(u.Debt))
}

const deposit = "üí≥ –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –Ω–∞–ª–æ–≥ –∏ –ø–æ–ª–æ–∂–∏–ª–∏ %s –≤ –±–∞–Ω–∫\\.\n\n_–¢–µ–ø–µ—Ä—å –Ω–∞ —Å—á–µ—Ç—É %s_"

func (a *App) handleDeposit(c tele.Context) error {
	user := getUser(c)
	amount, err := moneyArgument(c)
	if amount == 0 || err != nil {
		return err
	}
	amount, err = amountAfterBankFee(amount)
	if err != nil {
		return userError(c, err.Error())
	}
	ok := a.model.Deposit(user, amount, bankFee)
	if !ok {
		return userError(c, notEnoughMoney)
	}
	return c.Send(fmt.Sprintf(deposit, formatMoney(amount), formatMoney(user.Account+amount)),
		tele.ModeMarkdownV2)
}

const (
	withdraw     = "üí≥ –í—ã —Å–Ω—è–ª–∏ %s —Å–æ —Å—á–µ—Ç–∞\\.\n\n_–¢–µ–ø–µ—Ä—å –≤ –∫–æ—à–µ–ª—å–∫–µ %s_"
	withdrawDebt = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω–∏–º–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ —Å—á–µ—Ç–∞, –ø–æ–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã.\n"
)

func (a *App) handleWithdraw(c tele.Context) error {
	user := getUser(c)
	if user.Debtor() {
		return userError(c, withdrawDebt)
	}
	amount, err := moneyArgument(c)
	if amount == 0 || err != nil {
		return err
	}
	ok := a.model.Withdraw(user, amount, 0)
	if !ok {
		return userError(c, notEnoughMoney)
	}
	return c.Send(fmt.Sprintf(withdraw, formatMoney(amount), formatMoney(user.Balance+amount)),
		tele.ModeMarkdownV2)
}

func amountAfterBankFee(amount int) (int, error) {
	amount = amount - bankFee
	if amount <= 0 {
		return 0, errors.New(notEnoughMoney)
	}
	return amount, nil
}

const (
	debtorCannotLoan = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –¥–æ–ª–≥, –ø–æ–∫–∞ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã."
	debtTooLow       = "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç ‚Äî %s"
	limitTooLow      = "–í–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç ‚Äî %s"
	debtSuccess      = "üí≥ –í—ã –≤–∑—è–ª–∏ –≤ –∫—Ä–µ–¥–∏—Ç %s\n\n_–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å %s_"
)

// !–¥–æ–ª–≥, !–∫—Ä–µ–¥–∏—Ç
func (a *App) handleDebt(c tele.Context) error {
	user := getUser(c)
	if user.Debtor() {
		return userError(c, debtorCannotLoan)
	}
	amount, err := moneyArgument(c)
	if amount == 0 || err != nil {
		return err
	}
	if amount < minDebt {
		return userErrorMarkdown(c, fmt.Sprintf(debtTooLow, formatMoney(minDebt)))
	}
	fee := int(float64(amount) * debtFee)
	ok := a.model.Loan(user, amount, fee)
	if !ok {
		return userErrorMarkdown(c, fmt.Sprintf(limitTooLow, formatMoney(user.DebtLimit)))
	}
	return c.Send(fmt.Sprintf(debtSuccess, formatMoney(amount), formatMoney(amount+fee)),
		tele.ModeMarkdownV2)
}

const (
	notDebtor              = "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–ø–æ–≥–∞—à–µ–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤."
	notEnoughOnBankAccount = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç–µ."
	repayFullSuccess       = "üí≥ –í—ã –ø–æ–≥–∞—Å–∏–ª–∏ –∫—Ä–µ–¥–∏—Ç."
	repayPartialSuccess    = "üí≥ –í—ã –ø–æ–≥–∞—Å–∏–ª–∏ %s\n\n_–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–≥–∞—Å–∏—Ç—å: %s_"
)

func (a *App) handleRepay(c tele.Context) error {
	user := getUser(c)
	if !user.Debtor() {
		return userError(c, notDebtor)
	}
	amount, err := moneyArgument(c)
	if amount == 0 || err != nil {
		return err
	}
	if user.Debt <= amount {
		amount = user.Debt
	}
	ok := a.model.Repay(user, amount)
	if !ok {
		return userError(c, notEnoughOnBankAccount)
	}
	if amount == user.Debt {
		return c.Send(repayFullSuccess)
	}
	return c.Send(fmt.Sprintf(repayPartialSuccess, formatMoney(amount), formatMoney(user.Debt-amount)),
		tele.ModeMarkdownV2)
}
