package app

import (
	"errors"
	"fmt"
	"nechego/input"
	"nechego/model"
	"nechego/service"

	tele "gopkg.in/telebot.v3"
)

const bank = Response(`üè¶ <b>–ë–∞–Ω–∫:</b> –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç–µ %s

<i>–°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞: <code>!–æ–±–Ω–∞–ª</code></i>
<i>–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç: <code>!–¥–µ–ø–æ–∑–∏—Ç</code></i>
<i>–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: %s</i>

<i>%s</i>

<i>–í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç: <code>!–∫—Ä–µ–¥–∏—Ç</code></i>
<i>–ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç: <code>!–ø–æ–≥–∞—Å–∏—Ç—å</code></i>
<i>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: %s</i>
<i>–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç: %s</i>`)

// !–±–∞–Ω–∫
func (a *App) handleBank(c tele.Context) error {
	user := getUser(c)
	return respond(c, bank.Fill(
		formatMoney(user.Account),
		formatMoney(a.service.Config.DepositFee),
		debtStatus(user),
		formatPercentage(a.service.Config.DebtPercentage),
		formatMoney(user.DebtLimit)))
}

func debtStatus(u model.User) HTML {
	if u.Debtor() {
		return "–£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤."
	}
	return HTML(fmt.Sprintf("–í—ã –¥–æ–ª–∂–Ω—ã –±–∞–Ω–∫—É %s", formatMoney(u.Debt)))
}

const deposit = Response(`üí≥ –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∫–æ–º–∏—Å—Å–∏—é –∏ –ø–æ–ª–æ–∂–∏–ª–∏ %s –≤ –±–∞–Ω–∫.

<i>–¢–µ–ø–µ—Ä—å –Ω–∞ —Å—á–µ—Ç—É %s</i>`)

// !–¥–µ–ø–æ–∑–∏—Ç
func (a *App) handleDeposit(c tele.Context) error {
	user := getUser(c)
	amount, err := getMessage(c).MoneyArgument()
	if errors.Is(err, input.ErrAllIn) {
		amount = user.Balance
	} else if err != nil {
		return respondUserError(c, specifyAmount)
	}
	transfered, err := a.service.Deposit(user, amount)
	if err != nil {
		if errors.Is(err, service.ErrIncorrectAmount) {
			return respondUserError(c, incorrectAmount)
		}
		var moneyErr service.NotEnoughMoneyError
		if errors.As(err, &moneyErr) {
			return respondUserError(c, notEnoughMoneyDelta.Fill(formatMoney(moneyErr.Delta)))
		}
		return respondInternalError(c, err)
	}
	return respond(c, deposit.Fill(formatMoney(transfered), formatMoney(user.Account+transfered)))
}

const withdraw = Response(`üí≥ –í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∫–æ–º–∏—Å—Å–∏—é –∏ —Å–Ω—è–ª–∏ %s —Å–æ —Å—á–µ—Ç–∞.

<i>–¢–µ–ø–µ—Ä—å –≤ –∫–æ—à–µ–ª—å–∫–µ %s</i>`)

// !–æ–±–Ω–∞–ª
func (a *App) handleWithdraw(c tele.Context) error {
	user := getUser(c)
	amount, err := getMessage(c).MoneyArgument()
	if errors.Is(err, input.ErrAllIn) {
		amount = user.Account
	} else if err != nil {
		return respondUserError(c, specifyAmount)
	}
	transfered, err := a.service.Withdraw(user, amount)
	if err != nil {
		if errors.Is(err, service.ErrIncorrectAmount) {
			return respondUserError(c, incorrectAmount)
		}
		var moneyErr service.NotEnoughMoneyError
		if errors.As(err, &moneyErr) {
			return respondUserError(c, notEnoughMoneyDelta.Fill(formatMoney(moneyErr.Delta)))
		}
		return respondInternalError(c, err)
	}
	return respond(c, withdraw.Fill(formatMoney(transfered), formatMoney(user.Balance+transfered)))
}

const (
	minDebt     = UserError("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–µ–¥–∏—Ç ‚Äî %s")
	debtLimit   = UserError("–í–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç ‚Äî %s")
	debtSuccess = Response(`üí≥ –í—ã –≤–∑—è–ª–∏ –≤ –∫—Ä–µ–¥–∏—Ç %s

<i>–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å %s</i>`)
)

// !–∫—Ä–µ–¥–∏—Ç
func (a *App) handleDebt(c tele.Context) error {
	user := getUser(c)
	amount, err := getMessage(c).MoneyArgument()
	if errors.Is(err, input.ErrAllIn) {
		amount = user.DebtLimit
	} else if err != nil {
		return respondUserError(c, specifyAmount)
	}
	debt, err := a.service.Debt(user, amount)
	if err != nil {
		if errors.Is(err, service.ErrDebtLimit) {
			return respondUserError(c, debtLimit.Fill(formatMoney(user.DebtLimit)))
		}
		if errors.Is(err, service.ErrMinDebt) {
			return respondUserError(c, minDebt.Fill(formatMoney(a.service.Config.MinDebt)))
		}
		return respondInternalError(c, err)
	}
	return respond(c, debtSuccess.Fill(formatMoney(amount), formatMoney(debt)))
}

const (
	repayTotalSuccess   = Response("üí≥ –í—ã –ø–æ–≥–∞—Å–∏–ª–∏ –∫—Ä–µ–¥–∏—Ç.")
	repayPartialSuccess = Response(`üí≥ –í—ã –ø–æ–≥–∞—Å–∏–ª–∏ %s

<i>–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–≥–∞—Å–∏—Ç—å: %s</i>`)
)

// !–ø–æ–≥–∞—Å–∏—Ç—å
func (a *App) handleRepay(c tele.Context) error {
	user := getUser(c)
	amount, err := getMessage(c).MoneyArgument()
	if errors.Is(err, input.ErrAllIn) {
		amount = user.Account
	} else if err != nil {
		return respondUserError(c, specifyAmount)
	}
	debt, err := a.service.Repay(user, amount)
	if err != nil {
		var moneyErr service.NotEnoughMoneyError
		if errors.As(err, &moneyErr) {
			return respondUserError(c, notEnoughMoneyDelta.Fill(formatMoney(moneyErr.Delta)))
		}
		return respondInternalError(c, err)
	}
	if debt > 0 {
		return respond(c, repayPartialSuccess.Fill(formatMoney(amount), formatMoney(debt)))
	}
	return respond(c, repayTotalSuccess)
}
