package app

import (
	"errors"
	"fmt"
	"math/rand"
	"nechego/model"

	tele "gopkg.in/telebot.v3"
)

const (
	notEnoughFish = "üêü –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—ã–±—ã."
	fishEaten     = "üêü –í—ã —Å—ä–µ–ª–∏ —Ä—ã–±—É\\."
	youAreFull    = "üêü –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ—Å—Ç—å."
)

func (a *App) handleEatFish(c tele.Context) error {
	user := getUser(c)
	if hasFullEnergy(user) {
		return c.Send(youAreFull)
	}
	ok := a.model.EatFish(user, eatFishEnergyDelta, energyTrueCap)
	if !ok {
		return c.Send(notEnoughFish)
	}
	out := appendEnergyRemaining(fishEaten, user.Energy+eatFishEnergyDelta)
	return c.Send(out, tele.ModeMarkdownV2)
}

const (
	boughtFishingRod         = "üé£ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —É–¥–æ—á–∫—É –∑–∞ %s"
	alreadyCanFish           = "–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —É–¥–æ—á–∫—É."
	notEnoughMoneyFishingRod = "–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç %s"
)

// !—É–¥–æ—á–∫–∞
func (a *App) handleFishingRod(c tele.Context) error {
	user := getUser(c)
	if user.Fisher {
		return userError(c, alreadyCanFish)
	}
	ok := a.model.UpdateMoney(user, -fishingRodPrice)
	if !ok {
		return userErrorMarkdown(c, fmt.Sprintf(notEnoughMoneyFishingRod,
			formatMoney(fishingRodPrice-user.Balance)))
	}
	a.model.AllowFishing(user)
	return c.Send(fmt.Sprintf(boughtFishingRod, formatMoney(fishingRodPrice)),
		tele.ModeMarkdownV2)
}

type catchFishType int

const (
	catchFishRelease catchFishType = iota
	catchFishLost
	catchFishSell
	catchFishEat
	catchFishRetain
)

const (
	buyFishingRod             = "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —É–¥–æ—á–∫—É, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ä—ã–±–∞—á–∏—Ç—å."
	catchFishSellMessage      = "üé£ –í—ã –ø–æ–π–º–∞–ª–∏ —Ä—ã–±—É %s –∏ –ø—Ä–æ–¥–∞–ª–∏ –µ–µ –∑–∞ %s"
	catchFishReleaseMessage   = "üé£ –í—ã –ø–æ–π–º–∞–ª–∏ —Ä—ã–±—É %s, –Ω–æ —Ä–µ—à–∏–ª–∏ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –µ–µ\\."
	catchFishLostMessage      = "üé£ –í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã—É–¥–∏—Ç—å —Ä—ã–±—É –∏–∑ –≤–æ–¥—ã\\."
	catchFishEatMessage       = "üé£ –í—ã –ø–æ–π–º–∞–ª–∏ —Ä—ã–±—É %s –∏ —Å—ä–µ–ª–∏ –µ–µ\\."
	catchFishRetainMessage    = "üé£ –í—ã –ø–æ–π–º–∞–ª–∏ —Ä—ã–±—É %s –∏ –æ—Å—Ç–∞–≤–∏–ª–∏ –µ–µ —Å–µ–±–µ\\."
	catchFishSuccessThreshold = 0.5
	eatFishEnergyDelta        = 2
)

// !—Ä—ã–±–∞–ª–∫–∞
func (a *App) handleFishing(c tele.Context) error {
	user := getUser(c)
	if !user.Fisher {
		return userError(c, buyFishingRod)
	}
	ok := a.model.UpdateEnergy(user, -energyDelta, energyCap)
	if !ok {
		return userError(c, notEnoughEnergy)
	}

	switch randomFishType(user) {
	case catchFishSell:
		return a.sellFish(c, user)
	case catchFishRelease:
		return releaseFish(c, user)
	case catchFishLost:
		return lostFish(c, user)
	case catchFishEat:
		return a.eatFish(c, user)
	case catchFishRetain:
		return a.retainFish(c, user)
	default:
		return internalError(c, errors.New("unknown fish type"))
	}
}

func randomFishType(u model.User) catchFishType {
	success := []catchFishType{catchFishSell, catchFishEat, catchFishRetain}
	failure := []catchFishType{catchFishRelease, catchFishLost}
	r := rand.Float64()
	switch luckModifier(u) {
	case terribleLuckModifier:
		r -= .20
	case badLuckModifier:
		r -= .10
	case goodLuckModifier:
		r += .05
	case excellentLuckModifier:
		r += .10
	}
	if r >= catchFishSuccessThreshold {
		return success[rand.Intn(len(success))]
	}
	return failure[rand.Intn(len(failure))]
}

func (a *App) sellFish(c tele.Context, u model.User) error {
	fish := randomFish()
	a.model.UpdateMoney(u, fish.price())
	out := fmt.Sprintf(catchFishSellMessage, fish, formatMoney(fish.price()))
	out = appendEnergyRemaining(out, u.Energy-energyDelta)
	return c.Send(out, tele.ModeMarkdownV2)
}

func releaseFish(c tele.Context, u model.User) error {
	fish := randomFish()
	out := fmt.Sprintf(catchFishReleaseMessage, fish)
	out = appendEnergyRemaining(out, u.Energy-energyDelta)
	return c.Send(out, tele.ModeMarkdownV2)

}

func lostFish(c tele.Context, u model.User) error {
	out := appendEnergyRemaining(catchFishLostMessage, u.Energy-energyDelta)
	return c.Send(out, tele.ModeMarkdownV2)
}

func (a *App) eatFish(c tele.Context, u model.User) error {
	if hasFullEnergy(u) {
		return a.retainFish(c, u)
	}
	fish := randomFish()
	a.model.UpdateEnergy(u, eatFishEnergyDelta, energyTrueCap)
	out := fmt.Sprintf(catchFishEatMessage, fish)
	out = appendEnergyRemaining(out, u.Energy-energyDelta+eatFishEnergyDelta)
	return c.Send(out, tele.ModeMarkdownV2)
}

func (a *App) retainFish(c tele.Context, u model.User) error {
	fish := randomFish()
	a.model.AddFish(u)
	out := fmt.Sprintf(catchFishRetainMessage, fish)
	out = appendEnergyRemaining(out, u.Energy-energyDelta)
	return c.Send(out, tele.ModeMarkdownV2)
}

var fishNames = []string{
	"–©—É–∫–∞",
	"–û–∫—É–Ω—å",
	"–°—É–¥–∞–∫",
	"–ï—Ä—à",
	"–ë–µ—Ä—à",
	"–ñ–µ—Ä–µ—Ö",
	"–ì–æ–ª–∞–≤–ª—å",
	"–ó–º–µ–µ–≥–æ–ª–æ–≤",
	"–ù–∞–ª–∏–º",
	"–£–≥–æ—Ä—å",
	"–°–æ–º",
	"–õ–æ—Å–æ—Å—å",
	"–•–∞—Ä–∏—É—Å",
	"–§–æ—Ä–µ–ª—å",
	"–ì–æ–ª–µ—Ü",
	"–û—Å–µ—Ç—Ä",
	"–°—Ç–µ—Ä–ª—è–¥—å",
	"–ö–∞—Ä–ø",
	"–ö–∞—Ä–∞—Å—å",
	"–õ–∏–Ω—å",
	"–õ–µ—â",
	"–Ø–∑—å",
	"–ü–ª–æ—Ç–≤–∞",
	"–¢–æ–ª—Å—Ç–æ–ª–æ–±–∏–∫",
	"–ë–µ–ª–æ–≥–ª–∞–∑–∫–∞",
	"–ö—Ä–∞—Å–Ω–æ–ø–µ—Ä–∫–∞",
	"–£–∫–ª–µ–π–∫–∞",
	"–ü–æ–¥—É—Å—Ç",
	"–¢–∞–π–º–µ–Ω—å",
}

const (
	fishPricePerKg = 10
	minFishWeight  = 100
	maxFishWeight  = 5000
)

type fish struct {
	weight int // in grams
	name   string
}

func (f *fish) String() string {
	weight := float64(f.weight) / 1000
	return fmt.Sprintf("`%s (%.2f –∫–≥)`", f.name, weight)
}

func (f *fish) price() int {
	return int(float64(f.weight) / 1000 * fishPricePerKg)
}

func randomFish() *fish {
	return &fish{
		weight: randInRange(minFishWeight, maxFishWeight),
		name:   fishNames[rand.Intn(len(fishNames))],
	}
}
