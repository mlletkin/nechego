package app

import (
	"errors"
	"fmt"
	"math/rand"

	tele "gopkg.in/telebot.v3"
)

const (
	boughtFishingRod = "üé£ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —É–¥–æ—á–∫—É –∑–∞ `%s üí∞`"
	alreadyCanFish   = "–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —É–¥–æ—á–∫—É"
	fishingRodCost   = 50
)

// !—É–¥–æ—á–∫–∞
func (a *App) handleFishingRod(c tele.Context) error {
	user := getUser(c)
	if user.CanFish {
		return userError(c, alreadyCanFish)
	}
	ok := a.model.UpdateMoney(user, -fishingRodCost)
	if !ok {
		return userError(c, notEnoughMoney)
	}
	a.model.AllowFishing(user)
	return c.Send(fmt.Sprintf(boughtFishingRod, formatAmount(fishingRodCost)),
		tele.ModeMarkdownV2)
}

type catchFishType int

const (
	catchFishSell catchFishType = iota
	catchFishRelease
	catchFishBad
	catchFishEat
	catchFishCount
)

const (
	buyFishingRod           = "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —É–¥–æ—á–∫—É, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ä—ã–±–∞—á–∏—Ç—å."
	catchFishSellMessage    = "üé£ –í—ã –ø–æ–π–º–∞–ª–∏ —Ä—ã–±—É `%v` –∏ –ø—Ä–æ–¥–∞–ª–∏ –µ–µ –∑–∞ `%v üí∞`"
	catchFishReleaseMessage = "üé£ –í—ã –ø–æ–π–º–∞–ª–∏ —Ä—ã–±—É `%v`, –Ω–æ —Ä–µ—à–∏–ª–∏ –æ—Ç–ø—É—Å—Ç–∏–ª–∏ –µ–µ\\."
	catchFishBadMessage     = "üé£ –í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã—É–¥–∏—Ç—å —Ä—ã–±—É –∏–∑ –≤–æ–¥—ã\\."
	catchFishEatMessage     = "üé£ –í—ã –ø–æ–π–º–∞–ª–∏ —Ä—ã–±—É `%v` –∏ —Å—ä–µ–ª–∏ –µ–µ\\."
	fishSellMinPrice        = 1
	fishSellMaxPrice        = 40
)

// !—Ä—ã–±–∞–ª–∫–∞
func (a *App) handleFishing(c tele.Context) error {
	user := getUser(c)
	if !user.CanFish {
		return userError(c, buyFishingRod)
	}
	ok := a.model.UpdateEnergy(user, -energyDelta, energyCap)
	if !ok {
		return userError(c, notEnoughEnergy)
	}
	fish := randomFish()
	reward := randInRange(fishSellMinPrice, fishSellMaxPrice)

	switch catchFishType(rand.Intn(int(catchFishCount))) {
	case catchFishSell:
		a.model.UpdateMoney(user, reward)
		return c.Send(fmt.Sprintf(catchFishSellMessage, fish, formatAmount(reward)), tele.ModeMarkdownV2)
	case catchFishRelease:
		return c.Send(fmt.Sprintf(catchFishReleaseMessage, fish), tele.ModeMarkdownV2)
	case catchFishBad:
		return c.Send(catchFishBadMessage, tele.ModeMarkdownV2)
	case catchFishEat:
		a.model.UpdateEnergy(user, energyDelta, energyCap)
		return c.Send(fmt.Sprintf(catchFishEatMessage, fish), tele.ModeMarkdownV2)
	default:
		return internalError(c, errors.New("unknown fish type"))
	}
}

var fishes = []string{
	"–©—É–∫–∞",
	"–û–∫—É–Ω—å",
	"–°—É–¥–∞–∫",
	"–ï—Ä—à",
	"–ë–µ—Ä—à",
	"–ñ–µ—Ä–µ—Ö",
	"–ì–æ–ª–∞–≤–ª—å",
	"–ó–º–µ–µ–≥–æ–ª–æ–≤",
	"–ù–∞–ª–∏–º",
	"–£–≥–æ—Ä—å",
	"–°–æ–º",
	"–õ–æ—Å–æ—Å—å",
	"–•–∞—Ä–∏—É—Å",
	"–§–æ—Ä–µ–ª—å",
	"–ì–æ–ª–µ—Ü",
	"–û—Å–µ—Ç—Ä",
	"–°—Ç–µ—Ä–ª—è–¥—å",
	"–ö–∞—Ä–ø",
	"–ö–∞—Ä–∞—Å—å",
	"–õ–∏–Ω—å",
	"–õ–µ—â",
	"–Ø–∑—å",
	"–ü–ª–æ—Ç–≤–∞",
	"–¢–æ–ª—Å—Ç–æ–ª–æ–±–∏–∫",
	"–ë–µ–ª–æ–≥–ª–∞–∑–∫–∞",
	"–ö—Ä–∞—Å–Ω–æ–ø–µ—Ä–∫–∞",
	"–£–∫–ª–µ–π–∫–∞",
	"–ü–æ–¥—É—Å—Ç",
	"–¢–∞–π–º–µ–Ω—å",
}

func randomFish() string {
	return fishes[rand.Intn(len(fishes))]
}
