package app

import (
	"errors"
	"math/rand"
	"nechego/model"
	"unicode/utf8"

	tele "gopkg.in/telebot.v3"
)

// !–∏–Ω—Ñ–∞
func (a *App) handleProbability(c tele.Context) error {
	m := getMessage(c).Argument()
	return respond(c, probabilityResponse(m))
}

var probabilityTemplates = []string{
	"–ó–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –≥–æ–≤–æ—Ä–∏—Ç –º–Ω–µ –æ —Ç–æ–º, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ë–ª–∞–≥–æ–¥–∞—Ä—è —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–ø—ã—Ç—É —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–Ø –¥—É–º–∞—é, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ò—Å–ø–æ–ª—å–∑—É—è –¥–∏–∞–ª–µ–∫—Ç–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É, —è –ø—Ä–∏—à–µ–ª –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ü—Ä–æ–≤–µ–¥—è –Ω–µ–∫–∏–µ –∏–∑—ã—Å–∫–∞–Ω–∏—è, —è –≤—ã—Å—è—Å–Ω–∏–ª, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–Ø –ø—Ä–æ–≤–µ–ª –º—ã—Å–ª–µ–Ω–Ω—ã–π —ç–∫–ø–µ—Ä–∏–º–µ–Ω—Ç –∏ –≤—ã—è—Å–Ω–∏–ª, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ú–æ–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Ç—É–≥–∏ –ø—Ä–∏–≤–µ–ª–∏ –º–µ–Ω—è –∫ —Ç–æ–º—É, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–° –ø–æ–º–æ—â—å—é —Ñ–∞–∫—Ç–æ–≤ –∏ –ª–æ–≥–∏–∫–∏ —è –¥–æ–∫–∞–∑–∞–ª, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ö–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞, %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ü—Ä–∏–∫–∏–Ω—É–≤ —Ä–∞–∑ –Ω–∞ —Ä–∞–∑, —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å —Ç–µ–º, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–£–≤–µ—Ä—è—é –≤–∞—Å –≤ —Ç–æ–º, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
}

func randomProbabilityTemplate() string {
	return probabilityTemplates[rand.Intn(len(probabilityTemplates))]
}

func probabilityResponse(message string) Response {
	return Response(randomProbabilityTemplate()).Fill(message, rand.Intn(100+1))
}

const who = Response("%s %s")

// !–∫—Ç–æ
func (a *App) handleWho(c tele.Context) error {
	message := getMessage(c).Argument()
	u, err := a.service.Who(getGroup(c), message)
	if err != nil {
		return respondInternalError(c, err)
	}
	return respond(c, who.Fill(a.mustMentionUser(u), message))
}

const (
	maxNameLength = 16
	nameLong      = UserError("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ 16 —Å–∏–º–≤–æ–ª–æ–≤.")
	yourName      = Response("–í–∞—à–µ –∏–º—è: <b>%s</b> üîñ")
	pleaseReEnter = UserError("–ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –±–µ—Å–µ–¥—É —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
	nameSet       = Response("–ò–º—è <b>%s</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
)

// !–∏–º—è
func (a *App) handleTitle(c tele.Context) error {
	user := getUser(c)
	name := getMessage(c).Argument()
	if err := nameOk(name); err != nil {
		if errors.Is(err, errNameEmpty) {
			return respond(c, yourName.Fill(a.mustMentionUser(user)))
		}
		if errors.Is(err, errNameLong) {
			return respondUserError(c, nameLong)
		}
		return respondInternalError(c, err)
	}
	if err := setName(c, user, name); err != nil {
		return respondUserError(c, pleaseReEnter)
	}
	return respond(c, nameSet.Fill(name))
}

var (
	errNameEmpty = errors.New("empty name")
	errNameLong  = errors.New("name is too long")
)

func nameOk(n string) error {
	if n == "" {
		return errNameEmpty
	}
	if utf8.RuneCountInString(n) > maxNameLength {
		return errNameLong
	}
	return nil
}

func setName(c tele.Context, u model.User, name string) error {
	group := c.Chat()
	sender := c.Sender()
	return c.Bot().SetAdminTitle(group, sender, name)
}

const list = Response("–°–ø–∏—Å–æ–∫ %s üìù\n%s")

// !—Å–ø–∏—Å–æ–∫
func (a *App) handleList(c tele.Context) error {
	users, err := a.service.List(getGroup(c), a.pref.ListLength.Random())
	if err != nil {
		return respondInternalError(c, err)
	}
	return respond(c, list.Fill(
		getMessage(c).Argument(),
		a.itemizeUsers(users...)))
}

const (
	numberedTopTemplate   = Response("–¢–æ–ø %d %s üèÜ\n%s")
	unnumberedTopTemplate = Response("–¢–æ–ø %s üèÜ\n%s")
	badTopNumber          = UserError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
)

// !—Ç–æ–ø
func (a *App) handleTop(c tele.Context) error {
	argument, err := getMessage(c).TopArgument()
	if err != nil {
		return respondInternalError(c, err)
	}
	var number int
	if argument.Number != nil {
		number = *argument.Number
	} else {
		number = maxTopNumber
	}
	if number <= 0 || number > maxTopNumber {
		return respondUserError(c, badTopNumber)
	}
	users, err := a.service.List(getGroup(c), number)
	if err != nil {
		return respondInternalError(c, err)
	}
	if argument.Number != nil {
		return respond(c, numberedTopTemplate.Fill(
			number,
			argument.String,
			a.enumerateUsers(users...)))
	}
	return respond(c, unnumberedTopTemplate.Fill(
		argument.String,
		a.enumerateUsers(users...)))
}
