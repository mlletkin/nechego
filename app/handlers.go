package app

import (
	"context"
	"errors"
	"fmt"
	"io"
	"math/rand"
	"nechego/input"
	"nechego/model"
	"net/http"
	"net/url"
	"path/filepath"
	"time"
	"unicode/utf8"

	tele "gopkg.in/telebot.v3"
)

// handleProbability responds with a probability of the message.
func (a *App) handleProbability(c tele.Context) error {
	m := getMessage(c).Argument()
	return c.Send(probability(m))
}

var probabilityTemplates = []string{
	"–ó–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –≥–æ–≤–æ—Ä–∏—Ç –º–Ω–µ –æ —Ç–æ–º, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ë–ª–∞–≥–æ–¥–∞—Ä—è —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–º—É –æ–ø—ã—Ç—É —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–Ø –¥—É–º–∞—é, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ò—Å–ø–æ–ª—å–∑—É—è –¥–∏–∞–ª–µ–∫—Ç–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É, —è –ø—Ä–∏—à–µ–ª –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ü—Ä–æ–≤–µ–¥—è –Ω–µ–∫–∏–µ –∏–∑—ã—Å–∫–∞–Ω–∏—è, —è –≤—ã—Å—è—Å–Ω–∏–ª, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–Ø –ø—Ä–æ–≤–µ–ª –º—ã—Å–ª–µ–Ω–Ω—ã–π —ç–∫–ø–µ—Ä–∏–º–µ–Ω—Ç –∏ –≤—ã—è—Å–Ω–∏–ª, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ú–æ–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Ç—É–≥–∏ –ø—Ä–∏–≤–µ–ª–∏ –º–µ–Ω—è –∫ —Ç–æ–º—É, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–° –ø–æ–º–æ—â—å—é —Ñ–∞–∫—Ç–æ–≤ –∏ –ª–æ–≥–∏–∫–∏ —è –¥–æ–∫–∞–∑–∞–ª, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ö–∞–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞, %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–ü—Ä–∏–∫–∏–Ω—É–≤ —Ä–∞–∑ –Ω–∞ —Ä–∞–∑, —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è —Å —Ç–µ–º, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
	"–£–≤–µ—Ä—è—é –≤–∞—Å –≤ —Ç–æ–º, —á—Ç–æ %s —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é %d%%",
}

// probability returns a probability of the message.
func probability(message string) string {
	t := probabilityTemplates[rand.Intn(len(probabilityTemplates))]
	p := rand.Intn(101)
	return fmt.Sprintf(t, message, p)
}

// handleWho responds with the message appended to the random chat member.
func (a *App) handleWho(c tele.Context) error {
	u, err := a.model.RandomUser(getGroup(c))
	if err != nil {
		return internalError(c, err)
	}
	message := markdownEscaper.Replace(getMessage(c).Argument())
	return c.Send(fmt.Sprintf("%s %s", a.mustMentionUser(u), message), tele.ModeMarkdownV2)
}

const (
	maxNameLength = 16
	nameTooLong   = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ 16 —Å–∏–º–≤–æ–ª–æ–≤"
	yourNameIs    = "–í–∞—à–µ –∏–º—è: *%s* üîñ"
	pleaseReEnter = "–ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –±–µ—Å–µ–¥—É —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é"
	nameSet       = "–ò–º—è *%s* —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ"
)

// handleTitle sets the admin title of the sender.
func (a *App) handleTitle(c tele.Context) error {
	user := getUser(c)
	newName := getMessage(c).Argument()
	if newName == "" {
		return c.Send(fmt.Sprintf(yourNameIs, a.mustMentionUser(user)), tele.ModeMarkdownV2)
	}
	if utf8.RuneCountInString(newName) > maxNameLength {
		return userError(c, nameTooLong)
	}
	if err := setName(c, user, newName); err != nil {
		return userError(c, pleaseReEnter)
	}
	return c.Send(fmt.Sprintf(nameSet, markdownEscaper.Replace(newName)), tele.ModeMarkdownV2)
}

func setName(c tele.Context, u model.User, newName string) error {
	group := c.Chat()
	sender := c.Sender()
	return c.Bot().SetAdminTitle(group, sender, newName)
}

var (
	mouseVideoPath = filepath.Join(dataPath, "mouse.mp4")
	mouseVideo     = &tele.Video{File: tele.FromDisk(mouseVideoPath)}
)

// handleMouse sends the mouse video
func (a *App) handleMouse(c tele.Context) error {
	return c.Send(mouseVideo)
}

const (
	weatherTimeout      = 10 * time.Second
	weatherTimeoutError = "–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã—à–ª–æ ‚òîÔ∏è"
	placeNotExists      = "–¢–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚òîÔ∏è"
	weatherBadRequest   = "–ù–µ—É–¥–∞—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚òîÔ∏è"
	weatherURL          = "https://wttr.in/"
	weatherFormat       = "?format=%l:+%c+%t+\n–û—â—É—â–∞–µ—Ç—Å—è+–∫–∞–∫+%f\n\n–í–µ—Ç–µ—Ä+‚Äî+%w\n–í–ª–∞–∂–Ω–æ—Å—Ç—å+‚Äî+%h\n–î–∞–≤–ª–µ–Ω–∏–µ+‚Äî+%P\n–§–∞–∑–∞+–ª—É–Ω—ã+‚Äî+%m\n–£–§-–∏–Ω–¥–µ–∫—Å+‚Äî+%u\n"
)

// handleWeather sends the current weather for a given city
func (a *App) handleWeather(c tele.Context) error {
	place := getMessage(c).Argument()
	r, err := fetchWeather(place)
	if err != nil {
		if err.(*url.Error).Timeout() {
			return userError(c, weatherTimeoutError)
		}
		return internalError(c, err)
	}
	defer r.Body.Close()

	if r.StatusCode != http.StatusOK {
		if r.StatusCode == http.StatusNotFound {
			return userError(c, placeNotExists)
		}
		return userError(c, weatherBadRequest)
	}

	data, err := io.ReadAll(r.Body)
	if err != nil {
		return internalError(c, err)
	}
	return c.Send(string(data))
}

func fetchWeather(place string) (*http.Response, error) {
	ctx, cancel := context.WithTimeout(context.Background(), weatherTimeout)
	defer cancel()

	url := weatherURL + place + weatherFormat
	req, err := http.NewRequestWithContext(ctx, http.MethodGet, url, nil)
	if err != nil {
		return nil, err
	}
	req.Header.Add("Accept-Language", "ru")
	return http.DefaultClient.Do(req)
}

var tikTokVideo = &tele.Video{File: tele.FromDisk("data/tiktok.mp4")}

// !—Ç–∏–∫—Ç–æ–∫
func (a *App) handleTikTok(c tele.Context) error {
	return c.Send(tikTokVideo)
}

const (
	handleListTemplate = "–°–ø–∏—Å–æ–∫ %s üìù\n%s"
	minListLength      = 3
	maxListLength      = 5
)

// !—Å–ø–∏—Å–æ–∫
func (a *App) handleList(c tele.Context) error {
	n := randInRange(minListLength, maxListLength)
	users, err := a.model.RandomUsers(getGroup(c), n)
	if err != nil {
		return internalError(c, err)
	}
	what := markdownEscaper.Replace(getMessage(c).Argument())
	out := fmt.Sprintf(handleListTemplate, what, a.formatUnorderedList(users))
	return c.Send(out, tele.ModeMarkdownV2)
}

const (
	numberedTopTemplate   = "–¢–æ–ø %d %s üèÜ\n%s"
	unnumberedTopTemplate = "–¢–æ–ø %s üèÜ\n%s"
	maxTopNumber          = 5
	badTopNumber          = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
)

// !—Ç–æ–ø
func (a *App) handleTop(c tele.Context) error {
	argument, err := getMessage(c).TopArgument()
	if err != nil {
		return internalError(c, err)
	}

	var number int
	if argument.Number != nil {
		number = *argument.Number
	} else {
		number = maxTopNumber
	}
	if number <= 0 || number > maxTopNumber {
		return userError(c, badTopNumber)
	}
	users, err := a.model.RandomUsers(getGroup(c), number)
	if err != nil {
		return internalError(c, err)
	}
	top := a.formatOrderedList(users)
	what := markdownEscaper.Replace(argument.String)
	var out string
	if argument.Number != nil {
		out = fmt.Sprintf(numberedTopTemplate, number, what, top)
	} else {
		out = fmt.Sprintf(unnumberedTopTemplate, what, top)
	}
	return c.Send(out, tele.ModeMarkdownV2)
}

var games = []*tele.Dice{tele.Dart, tele.Ball, tele.Goal, tele.Slot, tele.Bowl}

// !–∏–≥—Ä–∞
func (a *App) handleGame(c tele.Context) error {
	game := games[rand.Intn(len(games))]
	return c.Send(game)
}

const randomPhotoChance = 0.02

func (a *App) handleRandomPhoto(c tele.Context) error {
	if rand.Float64() <= randomPhotoChance {
		return sendSmallProfilePhoto(c)
	}
	return nil
}

// !–æ—Ç–∫—Ä—ã—Ç—å
func (a *App) handleKeyboardOpen(c tele.Context) error {
	return c.Send("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ‚å®Ô∏è", keyboard)
}

// !–∑–∞–∫—Ä—ã—Ç—å
func (a *App) handleKeyboardClose(c tele.Context) error {
	return c.Send("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞ üò£", tele.RemoveKeyboard)
}

var (
	emojisActive   = []string{"üîà", "üîî", "‚úÖ", "üÜó", "‚ñ∂Ô∏è"}
	emojisInactive = []string{"üîá", "üîï", "üí§", "‚ùå", "‚õîÔ∏è", "üö´", "‚èπ"}
)

const (
	botTurnedOn         = "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω %s"
	botAlreadyTurnedOn  = "–ë–æ—Ç —É–∂–µ –≤–∫–ª—é—á–µ–Ω %s"
	botTurnedOff        = "–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω %s"
	botAlreadyTurnedOff = "–ë–æ—Ç —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω %s"
)

// !–≤–∫–ª—é—á–∏—Ç—å
func (a *App) handleTurnOn(c tele.Context) error {
	emoji := emojisActive[rand.Intn(len(emojisActive))]
	ok := a.model.EnableGroup(getGroup(c))
	if !ok {
		return c.Send(fmt.Sprintf(botAlreadyTurnedOn, emoji))
	}
	return c.Send(fmt.Sprintf(botTurnedOn, emoji))
}

// !–≤—ã–∫–ª—é—á–∏—Ç—å
func (a *App) handleTurnOff(c tele.Context) error {
	emoji := emojisInactive[rand.Intn(len(emojisInactive))]
	ok := a.model.DisableGroup(getGroup(c))
	if !ok {
		return c.Send(fmt.Sprintf(botAlreadyTurnedOff, emoji))
	}
	return c.Send(fmt.Sprintf(botTurnedOff, emoji), tele.RemoveKeyboard)
}

const (
	userBlocked          = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üö´"
	userAlreadyBlocked   = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üõë"
	userUnblocked        = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ"
	userAlreadyUnblocked = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùé"
)

// !–±–∞–Ω
func (a *App) handleBan(c tele.Context) error {
	user := getReplyUser(c)
	if user.Banned {
		return c.Send(userAlreadyBlocked)
	}
	a.model.BanUser(user)
	return c.Send(userBlocked)
}

// handleUnban removes the user ID of the reply message's sender from the ban list.
func (a *App) handleUnban(c tele.Context) error {
	user := getReplyUser(c)
	if !user.Banned {
		return c.Send(userAlreadyUnblocked)
	}
	a.model.UnbanUser(user)
	return c.Send(userUnblocked)
}

const infoTemplate = "‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è* üìå\n\n%s\n%s\n%s\n"

// handleInfo sends a few lists of useful information.
func (a *App) handleInfo(c tele.Context) error {
	group := getGroup(c)
	admins, err := a.adminList(group)
	if err != nil {
		return internalError(c, err)
	}
	bans, err := a.banList(group)
	if err != nil {
		return internalError(c, err)
	}
	commands, err := a.forbiddenCommandList(group)
	if err != nil {
		return internalError(c, err)
	}
	lists := fmt.Sprintf(infoTemplate, admins, bans, commands)
	return c.Send(lists, tele.ModeMarkdownV2)
}

const adminListTemplate = "üë§ _–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è_\n%s"

func (a *App) adminList(g model.Group) (string, error) {
	users, err := a.model.ListUsers(g)
	if err != nil {
		return "", err
	}
	admins := []model.User{}
	for _, u := range users {
		if u.Admin {
			admins = append(admins, u)
		}
	}
	return fmt.Sprintf(adminListTemplate, a.formatUnorderedList(admins)), nil
}

const banListTemplate = "üõë _–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫_\n%s"

func (a *App) banList(g model.Group) (string, error) {
	users, err := a.model.ListUsers(g)
	if err != nil {
		return "", err
	}
	banned := []model.User{}
	for _, u := range users {
		if u.Banned {
			banned = append(banned, u)
		}
	}
	return fmt.Sprintf(banListTemplate, a.formatUnorderedList(banned)), nil
}

const forbiddenCommandListTemplate = "üîí _–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã_\n%s"

func (a *App) forbiddenCommandList(g model.Group) (string, error) {
	commands, err := a.model.ForbiddenCommands(g)
	if err != nil {
		return "", err
	}
	return fmt.Sprintf(forbiddenCommandListTemplate, formatCommandList(commands)), nil
}

const help = `üìñ *–ö–æ–º–∞–Ω–¥—ã* üìå

üìÑ _–ë–∞–∑–æ–≤—ã–µ_
` +
	"‚Äî `!–∏–Ω—Ñ–∞\n`" +
	"‚Äî `!–∫—Ç–æ`\n" +
	"‚Äî `!—Å–ø–∏—Å–æ–∫`\n" +
	"‚Äî `!—Ç–æ–ø`\n" +
	"‚Äî `!–ø–æ–≥–æ–¥–∞`\n" +
	"‚Äî `!–ø–∞—Ä–∞ –¥–Ω—è`\n" +
	"‚Äî `!–µ–±–ª–∞–Ω –¥–Ω—è`\n" +
	"‚Äî `!–º—ã—à`\n" +
	"‚Äî `!—Ç–∏–∫—Ç–æ–∫`\n" +
	"‚Äî `!–º–∞—Å—é–Ω—è` ||üíñ||\n" +
	"‚Äî `!–ø–∞–ø–ø–∏`\n" +
	"‚Äî `!–∏–≥—Ä–∞`\n" +
	`
üíµ _–≠–∫–æ–Ω–æ–º–∏–∫–∞_
` +
	"‚Äî `!–∫–æ—Å—Ç–∏`\n" +
	"‚Äî `!–¥—Ä–∞–∫–∞`\n" +
	"‚Äî `!–ø–µ—Ä–µ–≤–æ–¥`\n" +
	"‚Äî `!–±–∞–ª–∞–Ω—Å`\n" +
	"‚Äî `!—ç–Ω–µ—Ä–≥–∏—è`\n" +
	"‚Äî `!—Å–∏–ª–∞`\n" +
	"‚Äî `!–∫–∞–ø–∏—Ç–∞–ª`\n" +
	"‚Äî `!–ø—Ä–æ—Ñ–∏–ª—å`\n" +
	"‚Äî `!—É–¥–æ—á–∫–∞`\n" +
	"‚Äî `!—Ä—ã–±–∞–ª–∫–∞`\n" +
	`
üîÆ _–ù–µ–π—Ä–æ—Å–µ—Ç–∏_
` +
	"‚Äî `!–∫–æ—Ç`\n" +
	"‚Äî `!–∞–Ω–∏–º–µ`\n" +
	"‚Äî `!—Ñ—É—Ä—Ä–∏`\n" +
	"‚Äî `!—Ñ–ª–∞–≥`\n" +
	"‚Äî `!—á–µ–ª`\n" +
	"‚Äî `!–ª–æ—à–∞–¥—å`\n" +
	"‚Äî `!–∞—Ä—Ç`\n" +
	"‚Äî `!–∞–≤—Ç–æ`\n" +
	`
üêà _–ö–æ—à–∫–∏_
` +
	"‚Äî `!–º–∞—Ä—Å–∏–∫`\n" +
	"‚Äî `!–º—É—Å—è`\n" +
	"‚Äî `!–∫–∞—Å–ø–µ—Ä`\n" +
	"‚Äî `!–∑–µ–≤—Å`\n" +
	`
üîß _–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_
` +
	"‚Äî `!–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è`\n" +
	"‚Äî `!–∫–æ–º–∞–Ω–¥—ã`\n" +
	"‚Äî `!–æ—Ç–∫—Ä—ã—Ç—å`\n" +
	"‚Äî `!–∑–∞–∫—Ä—ã—Ç—å`\n" +
	"‚Äî `!–≤–∫–ª—é—á–∏—Ç—å`\n" +
	"‚Äî `!–≤—ã–∫–ª—é—á–∏—Ç—å`\n" +
	"‚Äî `!–∏–º—è`\n" +
	`
üë§ _–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ_
` +
	"‚Äî `!–∑–∞–ø—Ä–µ—Ç–∏—Ç—å`\n" +
	"‚Äî `!—Ä–∞–∑—Ä–µ—à–∏—Ç—å`\n" +
	"‚Äî `!–±–∞–Ω`\n" +
	"‚Äî `!—Ä–∞–∑–±–∞–Ω`\n"

func (a *App) handleHelp(c tele.Context) error {
	return c.Send(help, tele.ModeMarkdownV2)
}

func (a *App) handleJoin(c tele.Context) error {
	u := c.Message().UserJoined
	m, err := c.Bot().ChatMemberOf(c.Chat(), u)
	if err != nil {
		return err
	}
	if err := promoteIfNotAdmin(c, m); err != nil {
		return err
	}
	return c.Send(helloSticker())
}

func promoteIfNotAdmin(c tele.Context, m *tele.ChatMember) error {
	if m.Role != tele.Administrator && m.Role != tele.Creator {
		m.Rights.CanBeEdited = true
		m.Rights.CanManageChat = true
		return c.Bot().Promote(c.Chat(), m)
	}
	return nil
}

const (
	commandForbidden        = "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ üö´"
	commandPermitted        = "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ ‚úÖ"
	commandAlreadyForbidden = "–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ üõë"
	commandAlreadyPermitted = "–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ ‚ùé"
)

// handleForbid forbids a command.
func (a *App) handleForbid(c tele.Context) error {
	return a.handleCommandAction(c, func(command input.Command) error {
		ok := a.model.ForbidCommand(getGroup(c), command)
		if !ok {
			return c.Send(commandAlreadyForbidden)
		}
		return c.Send(commandForbidden)
	})
}

// handlePermit permits a command.
func (a *App) handlePermit(c tele.Context) error {
	return a.handleCommandAction(c, func(command input.Command) error {
		ok := a.model.PermitCommand(getGroup(c), command)
		if !ok {
			return c.Send(commandAlreadyPermitted)
		}
		return c.Send(commandPermitted)
	})
}

const (
	specifyCommand = "–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
	unknownCommand = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
)

// handleCommandAction performs an action on a command.
func (a *App) handleCommandAction(c tele.Context, action func(input.Command) error) error {
	command, err := getMessage(c).CommandActionArgument()
	if err != nil {
		if errors.Is(err, input.ErrNoCommand) {
			return userError(c, specifyCommand)
		}
		if errors.Is(err, input.ErrUnknownCommand) {
			return userError(c, unknownCommand)
		}
		return internalError(c, err)
	}
	return action(command)
}
