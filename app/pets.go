package app

import (
	"errors"
	"nechego/service"

	tele "gopkg.in/telebot.v3"
)

const (
	yourPet   = Response("üêæ –í–∞—à –ø–∏—Ç–æ–º–µ—Ü ‚Äî %s")
	petBought = Response(`üêæ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ –∑–∞ %s.

%s –≠—Ç–æ <code>%s (%s)</code>.

<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>!–Ω–∞–∑–≤–∞—Ç—å &lt;–∏–º—è&gt;</code>.</i>`)
	petNamed        = Response("üêæ –í—ã –Ω–∞–∑–≤–∞–ª–∏ –ø–∏—Ç–æ–º—Ü–∞ <b>%s</b>.")
	petDropped      = Response("üò• –í—ã –≤—ã–∫–∏–Ω—É–ª–∏ —Å–≤–æ–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.")
	petBadName      = UserError("–¢–∞–∫–æ–µ –∏–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞.")
	petAlreadyNamed = UserError("–£ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —É–∂–µ –µ—Å—Ç—å –∏–º—è.")
	petAlreadyTaken = UserError("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü.")
	youHaveNoPet    = UserError("–£ –≤–∞—Å –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–∞.")
	nameYourPet     = UserError("–ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø–∏—Ç–æ–º—Ü–∞.")
)

func (a *App) handlePet(c tele.Context) error {
	pet, err := a.service.GetPet(getUser(c))
	if err != nil {
		if errors.Is(err, service.ErrNoPet) {
			return respondUserError(c, youHaveNoPet)
		}
		return respondInternalError(c, err)
	}
	if !pet.HasName() {
		return respondUserError(c, nameYourPet)
	}
	return respond(c, yourPet.Fill(formatPet(pet)))
}

func (a *App) handleBuyPet(c tele.Context) error {
	pet, err := a.service.BuyPet(getUser(c))
	if err != nil {
		var moneyErr service.NotEnoughMoneyError
		if errors.As(err, &moneyErr) {
			return respondUserError(c, notEnoughMoneyDelta.Fill(formatMoney(moneyErr.Delta)))
		}
		if errors.Is(err, service.ErrPetAlreadyTaken) {
			return respondUserError(c, petAlreadyTaken)
		}
		return respondInternalError(c, err)
	}
	return respond(c, petBought.Fill(
		formatMoney(a.service.Config.PetPrice),
		pet.Species.Emoji(),
		pet.Species.String(),
		pet.Gender.Emoji(),
	))
}

func (a *App) handleNamePet(c tele.Context) error {
	name := getMessage(c).Argument()
	if err := a.service.NamePet(getUser(c), name); err != nil {
		if errors.Is(err, service.ErrPetAlreadyNamed) {
			return respondUserError(c, petAlreadyNamed)
		}
		if errors.Is(err, service.ErrPetBadName) {
			return respondUserError(c, petBadName)
		}
		return respondInternalError(c, err)
	}
	return respond(c, petNamed.Fill(name))
}

func (a *App) handleDropPet(c tele.Context) error {
	if err := a.service.DropPet(getUser(c)); err != nil {
		if errors.Is(err, service.ErrNoPet) {
			return respondUserError(c, youHaveNoPet)
		}
		return respondInternalError(c, err)
	}
	return respond(c, petDropped)
}
