package format

import (
	"fmt"
	"nechego/game"
	"time"
)

const GameGoing = "üé≤ –ò–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç."

func DiceGame(who string, bet int, timeout time.Duration) string {
	sec := int(timeout / time.Second)
	c := NewConnector("\n")
	c.Add(fmt.Sprintf("üé≤ %s –∏–≥—Ä–∞–µ—Ç –Ω–∞ %s", Name(who), Money(bet)))
	c.Add(fmt.Sprintf("–£ –≤–∞—Å <code>%d —Å–µ–∫—É–Ω–¥</code> –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏!", sec))
	return c.String()
}

func DiceGameResult(r game.DiceGameResult) string {
	if r.Outcome == game.Win {
		return fmt.Sprintf("üí• –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ %s", Money(r.Prize))
	}
	if r.Outcome == game.Lose {
		return "üòµ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
	}
	return "üé≤ –ù–∏—á—å—è."
}

func DiceTimeout(bet int) string {
	return fmt.Sprintf("<i>‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ: –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ %s</i>", Money(bet))
}

func MinBet(n int) string {
	return fmt.Sprintf("üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ %s", Money(n))
}

func SlotWin(who string, prize int) string {
	return fmt.Sprintf("üé∞ %s –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç %s üí•", Name(who), Money(prize))
}

func SlotRoll(who string, bet int) string {
	return fmt.Sprintf("üé∞ %s –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å–ª–æ—Ç—ã –Ω–∞ %s", Name(who), Money(bet))
}

func BetSet(who string, n int) string {
	return fmt.Sprintf("üé∞ %s —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É %s", Name(who), Money(n))
}
