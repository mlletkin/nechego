package format

import (
	"fmt"
	"nechego/farm"
	"nechego/farm/plant"
	"nechego/game"
	"nechego/item"
)

const MaxSizeFarm = "üè° –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–µ—Ä–º—ã."

func Farm(mention string, f *farm.Farm, upgradeCost int) string {
	c := NewConnector("\n")
	c.Add(fmt.Sprintf("<b>üè° %s: –§–µ—Ä–º–∞ (%d √ó %d)</b>",
		Name(mention), f.Rows, f.Columns))
	if f.Fertilizer > 0 {
		c.Add(fmt.Sprintf("<i>üõ¢ –ó–∞–ø–∞—Å —É–¥–æ–±—Ä–µ–Ω–∏–π: %v –ª.</i>", f.Fertilizer))
	}
	if until := f.Until(); until > 0 {
		c.Add(fmt.Sprintf("<i>üåæ –î–æ —É—Ä–æ–∂–∞—è –æ—Å—Ç–∞–ª–æ—Å—å %s</i>", Duration(until)))
	}
	if free := f.Free(); free > 0 {
		c.Add(fmt.Sprintf("<i>üå± –ú–æ–∂–Ω–æ –ø–æ—Å–∞–¥–∏—Ç—å –µ—â—ë %d %s</i>.",
			free, declPlant(free)))
	}
	if pending := f.Pending(); pending > 0 {
		c.Add(fmt.Sprintf("<i>üß∫ –ú–æ–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π.</i>"))
	}
	if upgradeCost > 0 {
		c.Add(fmt.Sprintf("<i>üí∞ –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–µ–º–ª—é –∑–∞ %s.</i>",
			Money(upgradeCost)))
	}
	return c.String()
}

func declPlant(n int) string {
	suffix := "–π"
	switch n {
	case 1:
		suffix = "–µ"
	case 2, 3, 4:
		suffix = "—è"
	}
	return "—Ä–∞—Å—Ç–µ–Ω–∏" + suffix
}

func Plant(p *plant.Plant) string {
	return fmt.Sprintf("<code>%s</code>", p)
}

func CannotPlant(i *item.Item) string {
	return fmt.Sprintf("üå± –ù–µ–ª—å–∑—è –ø–æ—Å–∞–¥–∏—Ç—å %s.", Item(i))
}

func Planted(mention string, p ...*plant.Plant) string {
	if len(p) == 0 {
		return "üå± –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ—Å–∞–∂–µ–Ω–æ."
	}
	c := NewConnector(", ")
	for _, x := range p {
		c.Add(Plant(x))
	}
	return fmt.Sprintf("üå± %s –ø–æ—Å–∞–¥–∏–ª(–∞) %s.", Name(mention), c.String())
}

func Harvested(mention string, p ...*plant.Plant) string {
	if len(p) == 0 {
		return "üß∫ –ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–±—Ä–∞–Ω–æ."
	}
	c := NewConnector(", ")
	for _, x := range p {
		c.Add(Plant(x))
	}
	return fmt.Sprintf("üß∫ %s —Å–æ–±—Ä–∞–ª(–∞) %s.", Name(mention), c.String())
}

func FarmUpgraded(mention string, f *farm.Farm, cost int) string {
	c := NewConnector("\n")
	c.Add(fmt.Sprintf("üí∏ %s –ø—Ä–∏–æ–±—Ä–µ–ª(–∞) –∑–µ–º–ª—é –∑–∞ %s.", Name(mention), Money(cost)))
	c.Add(fmt.Sprintf("üè° –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–µ—Ä–º—ã: <b>%d √ó %d</b>.", f.Rows, f.Columns))
	return c.String()
}

func PriceList(p *game.PriceList) string {
	out := fmt.Sprintf("<b>üìä –¶–µ–Ω—ã –Ω–∞ %s</b>\n", p.Updated.Format("2006.01.02"))
	var table string
	for i, t := range plant.Types {
		table += fmt.Sprintf("<code>%s %-20s</code>", t, Money(p.Plants[t]))
		if i%2 == 0 {
			table += "<code>    </code>"
		} else {
			table += "\n"
		}
	}
	return out + table
}

type Use struct {
	c *Connector
}

func NewUse() *Use {
	return &Use{NewConnector(" ")}
}

func (u *Use) String() string {
	return u.c.String()
}

func (u *Use) Callback(mention string) game.UseCallback {
	return game.UseCallback{
		Fertilizer: func(f *farm.Fertilizer) {
			u.c.Add(Fertilize(mention, f))
		},
	}
}

func Fertilize(mention string, f *farm.Fertilizer) string {
	return fmt.Sprintf("üõ¢ %s –≤—ã–ª–∏–≤–∞–µ—Ç <code>%v –ª.</code> —É–¥–æ–±—Ä–µ–Ω–∏–π –Ω–∞ —Ñ–µ—Ä–º—É.", mention, f.Volume)
}

func CannotUse(x *item.Item) string {
	return fmt.Sprintf("üí° –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å %s.", Item(x))
}
