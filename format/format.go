package format

import (
	"fmt"
	"html"
	"nechego/fishing"
	"nechego/food"
	"nechego/game"
	"nechego/item"
	"nechego/modifier"
	"nechego/money"
	"nechego/phone"
	"strings"
	"time"
)

const (
	Empty                = "<code>. . .</code>"
	NoMoney              = "üíµ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."
	NoEnergy             = "‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏."
	AdminsOnly           = "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
	RepostMessage        = "‚úâÔ∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
	UserBanned           = "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
	UserUnbanned         = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
	CannotAttackYourself = "üõ°Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è."
	NoFood               = "üçä –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è –µ–¥–∞."
	NotHungry            = "üçä –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ—Å—Ç—å."
	InventoryFull        = "üóÑ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω."
	BadMarketName        = "üè™ –¢–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞."
	MarketRenamed        = "üè™ –í—ã –Ω–∞–∑–≤–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω."
	SpecifyMoney         = "üíµ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤."
	BadMoney             = "üíµ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤."
	CannotCraft          = "üõ† –≠—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å."
	InventorySorted      = "üóÉ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω."
	NoPhone              = "üì± –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
	BadPhone             = "‚òé –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞."
)

func Mention(uid int64, name string) string {
	return fmt.Sprintf(`<a href="tg://user?id=%d">%s</a>`, uid, html.EscapeString(name))
}

func Item(i *item.Item) string {
	return fmt.Sprintf("<code>%s</code>", i.Value)
}

func ItemsComma(items []*item.Item) string {
	r := make([]string, 0, len(items))
	for _, x := range items {
		r = append(r, Item(x))
	}
	return strings.Join(r, ", ")
}

func NumItem(n int, i *item.Item) string {
	return NumString(n, Item(i))
}

func NumString(n int, s string) string {
	return fmt.Sprintf("<code>%d ‚â° </code> %s", n, s)
}

func Items(items []*item.Item) string {
	if len(items) == 0 {
		return Empty
	}
	lines := make([]string, 0, len(items))
	for i, v := range items {
		lines = append(lines, NumItem(i, v))
	}
	return strings.Join(lines, "\n")
}

func Catch(items []*item.Item) string {
	lines := []string{}
	price, weight := 0.0, 0.0
	for i, v := range items {
		if f, ok := v.Value.(*fishing.Fish); ok {
			price += f.Price()
			weight += f.Weight
			lines = append(lines, NumItem(i, v))
		}
	}
	if len(lines) == 0 {
		return Empty
	}
	tail := fmt.Sprintf("–°—Ç–æ–∏–º–æ—Å—Ç—å: %s\n–í–µ—Å: %s",
		Money(int(price)), Weight(weight))
	lines = append(lines, tail)
	return strings.Join(lines, "\n")
}

func Products(products []*game.Product) string {
	if len(products) == 0 {
		return Empty
	}
	lines := make([]string, 0, len(products))
	for i, p := range products {
		lines = append(lines, NumItem(i, p.Item)+", "+Money(p.Price))
	}
	return strings.Join(lines, "\n")
}

func Money(q int) string {
	return fmt.Sprintf("<code>%d %s</code>", q, money.Symbol)
}

func Balance(q int) string {
	return "üíµ " + Money(q)
}

func Weight(w float64) string {
	return fmt.Sprintf("<code>%.2f –∫–≥ ‚öñÔ∏è</code>", w)
}

func Energy(e int) string {
	return fmt.Sprintf("<code>‚ö° %d</code>", e)
}

func EnergyOutOf(e, max int) string {
	return fmt.Sprintf("<code>%d –∏–∑ %d ‚ö°</code>", e, max)
}

func EnergyRemaining(e int) string {
	return fmt.Sprintf("<i>–≠–Ω–µ—Ä–≥–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å: %s</i>", Energy(e))
}

func Eat(i *item.Item) string {
	emoji, verb := "üçä", "—Å—ä–µ–ª–∏"
	if x, ok := i.Value.(*food.Food); ok && x.Beverage() {
		emoji, verb = "ü•§", "–≤—ã–ø–∏–ª–∏"
	}
	return fmt.Sprintf("%s –í—ã %s %s.", emoji, verb, Item(i))
}

func Fish(f *fishing.Fish) string {
	return fmt.Sprintf("<code>%s</code>", f)
}

func Rating(r float64) string {
	return fmt.Sprintf("<code>‚öúÔ∏è %.1f</code>", r)
}

func Strength(s float64) string {
	return fmt.Sprintf("<code>üí™ %.1f</code>", s)
}

func Luck(l float64) string {
	return fmt.Sprintf("<code>üçÄ %.1f</code>", 10*l)
}

func Messages(n int) string {
	return fmt.Sprintf("<code>‚úâÔ∏è %d</code>", n)
}

func Status(s string) string {
	return fmt.Sprintf("<i>%s</i>", s)
}

func Key(k int) string {
	return fmt.Sprintf("<code>#%d</code>", k)
}

func BadKey(k int) string {
	return fmt.Sprintf("üîñ –ü—Ä–µ–¥–º–µ—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω.", Key(k))
}

func ModifierEmojis(m []*modifier.Mod) string {
	emojis := []string{}
	for _, x := range m {
		if x.Emoji != "" {
			emojis = append(emojis, x.Emoji)
		}
	}
	return fmt.Sprintf("<code>%s</code>", strings.Join(emojis, "¬∑"))
}

func ModifierDescriptions(m []*modifier.Mod) string {
	descs := []string{}
	for _, x := range m {
		descs = append(descs, x.Description)
	}
	return fmt.Sprintf("<i>%s</i>", strings.Join(descs, "\n"))
}

func ModifierTitles(m []*modifier.Mod) string {
	titles := []string{}
	for _, x := range m {
		if x.Title != "" {
			titles = append(titles, x.Title)
		}
	}
	if len(titles) == 0 {
		titles = append(titles, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	}
	titles[0] = strings.Title(titles[0])
	return strings.Join(titles, " ")
}

func Percentage(p float64) string {
	return fmt.Sprintf("%.1f%%", p*100)
}

func SMSes(mention string, smses []*phone.SMS) string {
	if len(smses) == 0 {
		return fmt.Sprintf("<b>‚úâ %s: –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.</b>", mention)
	}
	lines := make([]string, 0, len(smses))
	for _, sms := range smses {
		lines = append(lines, SMS(sms))
	}
	head := fmt.Sprintf("<b>‚úâ %s: –°–æ–æ–±—â–µ–Ω–∏—è</b>\n", mention)
	end := strings.Join(lines, "\n")
	return head + end
}

func SMS(sms *phone.SMS) string {
	format := "2006/02/01"
	if sms.Time.YearDay() == time.Now().YearDay() {
		format = "15:04"
	}
	return fmt.Sprintf("<code>|%s|</code> <code>%s</code><b>:</b> %s",
		sms.Time.Format(format), sms.Sender, sms.Text)
}

func SMSMaxLen(l int) string {
	return fmt.Sprintf("‚úâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è %d —Å–∏–º–≤–æ–ª–æ–≤.", l)
}

type Contact struct {
	Name   string
	Number phone.Number
}

func (c Contact) String() string {
	return fmt.Sprintf("<b>‚Üí <code>%s</code>:</b> %s", c.Number, c.Name)
}

func Contacts(cc []Contact) string {
	if len(cc) == 0 {
		return "üë• –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ—Ç."
	}
	head := "<b>üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã</b>\n"
	lines := make([]string, 0, len(cc))
	for _, c := range cc {
		lines = append(lines, c.String())
	}
	tail := strings.Join(lines, "\n")
	return head + tail
}

func MessageSent(sender, receiver phone.Number) string {
	return fmt.Sprintf("üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n\n"+
		"‚úâ <code>%v</code> ‚Üí <code>%v</code>", sender, receiver)
}
