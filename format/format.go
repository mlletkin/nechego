package format

import (
	"fmt"
	"html"
	"nechego/fishing"
	"nechego/game"
	"nechego/modifier"
	"strings"
)

const (
	Empty                = "<code>. . .</code>"
	NoMoney              = "üíµ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."
	NoEnergy             = "‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏."
	AdminsOnly           = "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
	RepostMessage        = "‚úâÔ∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
	UserBanned           = "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
	UserUnbanned         = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
	CannotAttackYourself = "üõ°Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è."
	NoFood               = "üçä –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∞—è –µ–¥–∞."
	NotHungry            = "üçä –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ—Å—Ç—å."
	InventoryFull        = "üóÑ –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω."
)

func Mention(uid int64, name string) string {
	return fmt.Sprintf(`<a href="tg://user?id=%d">%s</a>`, uid, html.EscapeString(name))
}

func Items(items []*game.Item) []string {
	lines := []string{}
	for i, v := range items {
		lines = append(lines, fmt.Sprintf("<code>%v ‚â° </code> %s", i, Item(v)))
	}
	if len(lines) == 0 {
		return []string{Empty}
	}
	return lines
}

func Item(i *game.Item) string {
	return fmt.Sprintf("<code>%s</code>", i.Value)
}

func Products(products []*game.Product) []string {
	lines := []string{}
	for i, p := range products {
		line := fmt.Sprintf("<code>%v ‚â° </code> %s, %s", i, Item(p.Item), Money(p.Price))
		lines = append(lines, line)
	}
	if len(lines) == 0 {
		return []string{Empty}
	}
	return lines
}

func Money(q int) string {
	return fmt.Sprintf("<code>%d ‚Ç¥</code>", q)
}

func Energy(e int) string {
	return fmt.Sprintf("<code>%d ‚ö°</code>", e)
}

func EnergyOutOf(e, max int) string {
	return fmt.Sprintf("<code>%d –∏–∑ %d ‚ö°</code>", e, max)
}

func EnergyRemaining(e int) string {
	return fmt.Sprintf("<i>–≠–Ω–µ—Ä–≥–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å: %s</i>", Energy(e))
}

func Eat(s string) string {
	return fmt.Sprintf("üçä –í—ã —Å—ä–µ–ª–∏ %s.", s)
}

func Fish(f *fishing.Fish) string {
	return fmt.Sprintf("<code>%s</code>", f)
}

func Rating(r float64) string {
	return fmt.Sprintf("<code>%.1f ‚öúÔ∏è</code>", r)
}

func Strength(s float64) string {
	return fmt.Sprintf("<code>%.2f üí™</code>", s)
}

func Messages(n int) string {
	return fmt.Sprintf("<code>%d ‚úâÔ∏è</code>", n)
}

func Status(s string) string {
	return fmt.Sprintf("<i>%s</i>", s)
}

func Key(k int) string {
	return fmt.Sprintf("<code>#%d</code>", k)
}

func BadKey(k int) string {
	return fmt.Sprintf("üîñ –ü—Ä–µ–¥–º–µ—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω.", Key(k))
}

func ModifierEmojis(m []*modifier.Mod) string {
	emojis := []string{}
	for _, x := range m {
		if x.Emoji != "" {
			emojis = append(emojis, x.Emoji)
		}
	}
	return fmt.Sprintf("<code>%s</code>", strings.Join(emojis, "¬∑"))
}

func ModifierDescriptions(m []*modifier.Mod) string {
	descs := []string{}
	for _, x := range m {
		descs = append(descs, x.Description)
	}
	return fmt.Sprintf("<i>%s</i>", strings.Join(descs, "\n"))
}

func ModifierTitles(m []*modifier.Mod) string {
	titles := []string{}
	for _, x := range m {
		if x.Title != "" {
			titles = append(titles, x.Title)
		}
	}
	if len(titles) == 0 {
		titles = append(titles, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
	}
	titles[0] = strings.Title(titles[0])
	return strings.Join(titles, " ")
}

func Percentage(p float64) string {
	return fmt.Sprintf("%.1f%%", p*100)
}
