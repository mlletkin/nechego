package format

import (
	"fmt"
	"math/rand"
	"nechego/fishing"
	"nechego/food"
	"nechego/game"
	"nechego/item"
	"nechego/modifier"
	"nechego/money"
	"nechego/phone"
	"strconv"
	"time"
)

const (
	Empty                = "<code>. . .</code>"
	NoMoney              = "üíµ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."
	NoEnergy             = "‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏."
	AdminsOnly           = "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
	RepostMessage        = "‚úâÔ∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
	UserUnbanned         = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
	CannotAttackYourself = "üõ°Ô∏è –ù–µ–ª—å–∑—è –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è."
	NoFood               = "üçä –ü–æ–¥—Ö–æ–¥—è—â–µ–π –µ–¥—ã –Ω–µ—Ç."
	NotHungry            = "üçä –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ—Å—Ç—å."
	InventoryFull        = "üóÑ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω."
	BadMarketName        = "üè™ –¢–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞."
	MarketRenamed        = "üè™ –ú–∞–≥–∞–∑–∏–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω."
	SpecifyMoney         = "üíµ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤."
	BadMoney             = "üíµ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤."
	CannotCraft          = "üõ† –≠—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å."
	InventorySorted      = "üóÉ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω."
	NoPhone              = "üì± –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
	BadPhone             = "‚òé –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞."
	BuyFishingRod        = "üé£ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —É–¥–æ—á–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ä—ã–±–∞—á–∏—Ç—å."
	FishingRodBroke      = "üé£ –£–¥–æ—á–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å."
	NoNet                = "üï∏ –£ –≤–∞—Å –Ω–µ—Ç —Ä—ã–±–æ–ª–æ–≤–Ω–æ–π —Å–µ—Ç–∏."
	NetAlreadyCast       = "üï∏ –†—ã–±–æ–ª–æ–≤–Ω–∞—è —Å–µ—Ç—å —É–∂–µ –∑–∞–∫–∏–Ω—É—Ç–∞."
	FishInNet            = "üï∏ –ù–µ–ª—å–∑—è –∑–∞–∫–∏–Ω—É—Ç—å —Ä—ã–±–æ–ª–æ–≤–Ω—É—é —Å–µ—Ç—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Ä—ã–±–∞."
	CastNet              = "üï∏ –†—ã–±–æ–ª–æ–≤–Ω–∞—è —Å–µ—Ç—å –∑–∞–∫–∏–Ω—É—Ç–∞."
	NetNotCasted         = "üï∏ –†—ã–±–æ–ª–æ–≤–Ω–∞—è —Å–µ—Ç—å –µ—â–µ –Ω–µ –∑–∞–∫–∏–Ω—É—Ç–∞."
	NoFishingRecords     = "üèÜ –†–µ–∫–æ—Ä–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
)

func Item(i *item.Item) string {
	return fmt.Sprintf("<code>%s</code>", i.Value)
}

func ItemsComma(items []*item.Item) string {
	c := NewConnector(", ")
	for _, x := range items {
		c.Add(Item(x))
	}
	return c.String()
}

func NumItem(n int, i *item.Item) string {
	return NumString(n, Item(i))
}

func NumString(n int, s string) string {
	return fmt.Sprintf("<code>%d ‚â° </code> %s", n, s)
}

func Items(items []*item.Item) string {
	if len(items) == 0 {
		return Empty
	}
	c := NewConnector("\n")
	for i, v := range items {
		c.Add(NumItem(i, v))
	}
	return c.String()
}

func Catch(items []*item.Item) string {
	if len(items) == 0 {
		return Empty
	}
	c := NewConnector("\n")
	price, weight := 0.0, 0.0
	for i, v := range items {
		if f, ok := v.Value.(*fishing.Fish); ok {
			price += f.Price()
			weight += f.Weight
			c.Add(NumItem(i, v))
		}
	}
	c.Add(fmt.Sprintf("–°—Ç–æ–∏–º–æ—Å—Ç—å: %s\n–í–µ—Å: %s",
		Money(int(price)), Weight(weight)))
	return c.String()
}

func Products(products []*game.Product) string {
	if len(products) == 0 {
		return Empty
	}
	c := NewConnector("\n")
	for i, p := range products {
		c.Add(fmt.Sprintf("%s, %s", NumItem(i, p.Item), Money(p.Price)))
	}
	return c.String()
}

func Money(q int) string {
	return fmt.Sprintf("<code>%d %s</code>", q, money.Currency)
}

func Balance(q int) string {
	return "üíµ " + Money(q)
}

func Weight(w float64) string {
	return fmt.Sprintf("<code>%.2f –∫–≥ ‚öñÔ∏è</code>", w)
}

func Energy(e game.Energy) string {
	return fmt.Sprintf("<code>‚ö° %.1f%%</code>", 100*e)
}

func EnergyRemaining(e game.Energy) string {
	return fmt.Sprintf("<i>–≠–Ω–µ—Ä–≥–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å: %s</i>", Energy(e))
}

func Eat(mention string, i *item.Item) string {
	emoji, verb := "üçä", "—Å—ä–µ–ª(–∞)"
	if x, ok := i.Value.(*food.Food); ok && x.Beverage() {
		emoji, verb = "ü•§", "–≤—ã–ø–∏–ª(–∞)"
	}
	return fmt.Sprintf("%s %s %s %s.", emoji, mention, verb, Item(i))
}

func Fish(f *fishing.Fish) string {
	return fmt.Sprintf("<code>%s</code>", f)
}

func Rating(r float64) string {
	return fmt.Sprintf("<code>‚öúÔ∏è %.1f</code>", r)
}

func Strength(s float64) string {
	return fmt.Sprintf("<code>üí™ %.1f</code>", s)
}

func Luck(l float64) string {
	return fmt.Sprintf("<code>üçÄ %.1f</code>", 10*l)
}

func Messages(n int) string {
	return fmt.Sprintf("<code>‚úâÔ∏è %d</code>", n)
}

func Status(s string) string {
	return fmt.Sprintf("<i>%s</i>", s)
}

func Key(k int) string {
	return fmt.Sprintf("<code>#%d</code>", k)
}

func BadKey(k int) string {
	return fmt.Sprintf("üîñ –ü—Ä–µ–¥–º–µ—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω.", Key(k))
}

func Modset(s modifier.Set) string {
	c := NewConnector("\n")
	for _, x := range s.List() {
		c.Add(fmt.Sprintf("<i>%s %s</i>", x.Emoji, x.Description))
	}
	return c.String()
}

func Percentage(p float64) string {
	return fmt.Sprintf("%.1f%%", p*100)
}

func SMSes(mention string, smses []*phone.SMS) string {
	if len(smses) == 0 {
		return fmt.Sprintf("<b>‚úâ %s: –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.</b>", mention)
	}
	c := NewConnector("\n")
	c.Add(fmt.Sprintf("<b>‚úâ %s: –°–æ–æ–±—â–µ–Ω–∏—è</b>", mention))
	for _, sms := range smses {
		c.Add(SMS(sms))
	}
	return c.String()
}

func SMS(sms *phone.SMS) string {
	format := "2006/02/01"
	if sms.Time.YearDay() == time.Now().YearDay() {
		format = "15:04"
	}
	return fmt.Sprintf("<code>|%s|</code> <code>%s</code><b>:</b> %s",
		sms.Time.Format(format), sms.Sender, sms.Text)
}

func SMSMaxLen(l int) string {
	return fmt.Sprintf("‚úâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è %d —Å–∏–º–≤–æ–ª–æ–≤.", l)
}

type Contact struct {
	Name   string
	Number phone.Number
}

func (c Contact) String() string {
	return fmt.Sprintf("<b>‚Üí <code>%s</code>:</b> %s", c.Number, c.Name)
}

func Contacts(cc []Contact) string {
	if len(cc) == 0 {
		return "üë• –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ—Ç."
	}
	c := NewConnector("\n")
	c.Add("<b>üë• –ö–æ–Ω—Ç–∞–∫—Ç—ã</b>")
	for _, contact := range cc {
		c.Add(contact.String())
	}
	return c.String()
}

func MessageSent(sender, receiver phone.Number) string {
	return fmt.Sprintf("üì± –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.\n\n"+
		"‚úâ <code>%v</code> ‚Üí <code>%v</code>", sender, receiver)
}

func SpamSent(mention string, price int) string {
	return fmt.Sprintf("‚úâ %s —Å–æ–≤–µ—Ä—à–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞ %s.", mention, Money(price))
}

func UserBanned(hours int) string {
	suffix := "–æ–≤"
	switch hours {
	case 1:
		suffix = ""
	case 2, 3, 4:
		suffix = "–∞"

	}
	return fmt.Sprintf("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ %d —á–∞—Å%s.", hours, suffix)
}

func CannotDrop(i *item.Item) string {
	return fmt.Sprintf("‚ôª –ù–µ–ª—å–∑—è –≤—ã–ª–æ–∂–∏—Ç—å %s.", Item(i))
}

func Drop(mention string, i *item.Item) string {
	return fmt.Sprintf("‚ôª %s –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ—Ç %s.", mention, Item(i))
}

func CannotPick(i *item.Item) string {
	return fmt.Sprintf("‚ôª –ù–µ–ª—å–∑—è –≤–∑—è—Ç—å %s.", Item(i))
}

func Pick(mention string, i *item.Item) string {
	return fmt.Sprintf("ü´≥ %s –±–µ—Ä–µ—Ç %s.", mention, Item(i))
}

func NotOnFloor(key int) string {
	return fmt.Sprintf("üóÑ –ü—Ä–µ–¥–º–µ—Ç–∞ %s –Ω–µ—Ç –Ω–∞ –ø–æ–ª—É.", Key(key))
}

func CannotSell(i *item.Item) string {
	return fmt.Sprintf("üè™ –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å %s.", Item(i))
}

func Sell(mention string, i *item.Item, profit int) string {
	return fmt.Sprintf("üíµ %s –ø—Ä–æ–¥–∞–µ—Ç %s –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç %s.",
		mention, Item(i), Money(profit))
}

func BadFishOutcome() string {
	outcomes := [...]string{
		"–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã—É–¥–∏—Ç—å —Ä—ã–±—É.",
		"–†—ã–±–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å —Å –∫—Ä—é—á–∫–∞.",
		"–†—ã–±–∞ —Å–æ—Ä–≤–∞–ª–∞ –ª–µ—Å–∫—É.",
		"–†—ã–±–∞ —Å–∫—Ä—ã–ª–∞—Å—å –≤ –≤–æ–¥–æ—Ä–æ—Å–ª—è—Ö.",
		"–†—ã–±–∞ –≤—ã—Å–∫–æ–ª—å–∑–Ω—É–ª–∞ –∏–∑ —Ä—É–∫.",
		"–í—ã –æ—Ç–ø—É—Å—Ç–∏–ª–∏ —Ä—ã–±—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –≤–æ–¥—É.",
	}
	return "üé£ " + outcomes[rand.Intn(len(outcomes))]
}

func FishCatch(mention string, i *item.Item) string {
	return fmt.Sprintf("üé£ %s –ø–æ–ª—É—á–∞–µ—Ç %s.", mention, Item(i))
}

func DrawNet(net *fishing.Net) string {
	const s = `<b>üï∏ –°–µ—Ç—å –≤—ã—Ç—è–Ω—É—Ç–∞.</b> –í–Ω—É—Ç—Ä–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <code>%s</code>.

<i>üêü –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>!—É–ª–æ–≤</code>, —á—Ç–æ–±—ã —Ä–∞–∑–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å.</i>`
	return fmt.Sprintf(s, fish(net.Count()))
}

func Net(n *fishing.Net) string {
	const s = `<b>üï∏ –£ –≤–∞—Å –µ—Å—Ç—å —Ä—ã–±–æ–ª–æ–≤–Ω–∞—è —Å–µ—Ç—å –Ω–∞ <code>%d</code> —Å–ª–æ—Ç–æ–≤.</b>
üêü –í —Å–µ—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <code>%s</code>.

<i>–ö–æ–º–∞–Ω–¥—ã: <code>!–∑–∞–∫–∏–Ω—É—Ç—å —Å–µ—Ç—å</code>, <code>!–≤—ã—Ç—è–Ω—É—Ç—å —Å–µ—Ç—å</code>.</i>`
	return fmt.Sprintf(s, n.Capacity, fish(n.Count()))
}

func fish(count int) string {
	suffix := ""
	switch count {
	case 1:
		suffix = "–∞"
	case 2, 3, 4:
		suffix = "—ã"
	}
	return fmt.Sprintf("%d —Ä—ã–±%s", count, suffix)
}

func NewRecord(e *fishing.Entry, p fishing.Parameter) string {
	var p1, p2 string
	switch p {
	case fishing.Weight:
		p1, p2 = "–≤–µ—Å—É", "—Ç—è–∂–µ–ª–∞—è"
	case fishing.Length:
		p1, p2 = "–¥–ª–∏–Ω–µ", "–±–æ–ª—å—à–∞—è"
	case fishing.Price:
		p1, p2 = "—Ü–µ–Ω–µ", "–¥–æ—Ä–æ–≥–∞—è"
	}
	c := NewConnector("\n")
	c.Add("<b>üéâ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –ø–æ %s —Ä—ã–±—ã!</b>")
	c.Add("%s —ç—Ç–æ —Å–∞–º–∞—è %s —Ä—ã–±–∞ –∏–∑ –≤—Å–µ—Ö –ø–æ–π–º–∞–Ω–Ω—ã—Ö.")
	return fmt.Sprintf(c.String(), p1, Fish(e.Fish), p2)
}

func FishingRecords(price []*fishing.Entry, weight, length *fishing.Entry) string {
	c := NewConnector("\n")
	c.Add("<b>üèÜ –ö–Ω–∏–≥–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ üé£</b>")
	c.Add("")
	c.Add("<b>üí∞ –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ —Ä—ã–±—ã:</b>")
	for i, e := range price {
		n := fmt.Sprintf("<b><i>%s</i></b>. ", mention(e.TUID, strconv.Itoa(1+i)))
		c.Add(n + Fish(e.Fish) + ", " + Money(int(e.Fish.Price())))
	}
	c.Add("")
	c.Add("<b>‚öñ –°–∞–º–∞—è —Ç—è–∂–µ–ª–∞—è —Ä—ã–±–∞:</b>")
	c.Add(fmt.Sprintf("<b><i>%s</i></b> %s", mention(weight.TUID, "‚Üí"), Fish(weight.Fish)))
	c.Add("")
	c.Add("<b>üìê –°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ä—ã–±–∞:</b>")
	c.Add(fmt.Sprintf("<b><i>%s</i></b> %s", mention(length.TUID, "‚Üí"), Fish(length.Fish)))
	return c.String()
}

func mention(id int64, name string) string {
	return fmt.Sprintf(`<a href="tg://user?id=%d">%s</a>`, id, name)
}
