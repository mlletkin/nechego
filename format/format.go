package format

import (
	"fmt"
	"math/rand"
	"nechego/fishing"
	"nechego/food"
	"nechego/game"
	"nechego/item"
	"nechego/money"
	"strconv"
	"strings"
	"time"

	"golang.org/x/text/message"
)

const (
	Empty                = "<code>. . .</code>"
	NoMoney              = "üíµ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤."
	NoEnergy             = "‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏."
	AdminsOnly           = "‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
	RepostMessage        = "‚úâÔ∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
	UserUnbanned         = "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
	CannotAttackYourself = "üõ°Ô∏è –ù–µ–ª—å–∑—è –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è."
	NoFood               = "üçä –ü–æ–¥—Ö–æ–¥—è—â–µ–π –µ–¥—ã –Ω–µ—Ç."
	NotHungry            = "üçä –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ—Å—Ç—å."
	InventoryOverflow    = "üóÑ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω."
	BadMarketName        = "üè™ –¢–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞."
	MarketRenamed        = "üè™ –ú–∞–≥–∞–∑–∏–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω."
	SpecifyMoney         = "üíµ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤."
	BadMoney             = "üíµ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–µ–¥—Å—Ç–≤."
	CannotCraft          = "üõ† –≠—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–µ–ª—å–∑—è –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å."
	InventorySorted      = "üóÉ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω."
	BuyFishingRod        = "üé£ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —É–¥–æ—á–∫—É –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ä—ã–±–∞—á–∏—Ç—å."
	FishingRodBroke      = "üé£ –£–¥–æ—á–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å."
	NoFishingRecords     = "üèÜ –†–µ–∫–æ—Ä–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
	NotOnline            = "üö´ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–µ—Ç–∏."
	CannotGetJob         = "üíº –¢–∞–∫—É—é —Ä–∞–±–æ—Ç—É –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è."
	CannotFriend         = "üë§ –° —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–µ–ª—å–∑—è –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è."
	NonFriendTransfer    = "üì¶ –í–µ—â–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ —Å –≤–∞–º–∏ –¥—Ä—É–∂–∏—Ç."
	ItemNotFound         = "üîñ –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
)

func Link(id int64, text string) string {
	return fmt.Sprintf(`<a href="tg://user?id=%d">%s</a>`, id, text)
}

func Item(i *item.Item) string {
	return fmt.Sprintf("<code>%s</code>", i.Value)
}

func Selector(key int, s string) string {
	return fmt.Sprintf("<code>%2d ‚â° </code>%s", key, s)
}

func Items(is []*item.Item) string {
	const (
		limit        = 30
		amortization = 5
	)
	if len(is) == 0 {
		return Empty
	}
	c := NewConnector("\n")
	for k, i := range is {
		if k >= limit && len(is) > limit+amortization {
			c.Add(fmt.Sprintf("<i>...–∏ –µ—â—ë %d –ø—Ä–µ–¥–º–µ—Ç–æ–≤.</i>", len(is)-k))
			break
		}
		c.Add(Selector(k, Item(i)))
	}
	return c.String()
}

func Catch(is []*item.Item) string {
	if len(is) == 0 {
		return Empty
	}
	c := NewConnector("\n")
	price, weight := 0.0, 0.0
	for k, i := range is {
		if f, ok := i.Value.(*fishing.Fish); ok {
			price += f.Price()
			weight += f.Weight
			c.Add(Selector(k, Item(i)))
		}
	}
	c.Add(fmt.Sprintf("–°—Ç–æ–∏–º–æ—Å—Ç—å: %s", Money(int(price))))
	c.Add(fmt.Sprintf("–í–µ—Å: %s", Weight(weight)))
	return c.String()
}

func Products(products []*game.Product) string {
	if len(products) == 0 {
		return Empty
	}
	c := NewConnector("\n")
	for k, p := range products {
		c.Add(fmt.Sprintf("%s <code>‚ü®%s‚ü©</code>", Selector(k, Item(p.Item)), Money(p.Price)))
	}
	return c.String()
}

func Money(q int) string {
	p := message.NewPrinter(message.MatchLanguage("ru"))
	return p.Sprintf("<code>%d %s</code>", q, money.Currency)
}

func Name(s string) string {
	return fmt.Sprintf("<b>%s</b>", s)
}

func User(u *game.User) string {
	return Name(Link(u.ID, u.Name))
}

func Balance(q int) string {
	return "üíµ " + Money(q)
}

func Weight(w float64) string {
	return fmt.Sprintf("<code>%.2f –∫–≥ ‚öñÔ∏è</code>", w)
}

func Energy(e game.Energy) string {
	return fmt.Sprintf("<code>‚ö° %.1f%%</code>", 100*e)
}

func EnergyRemaining(e game.Energy) string {
	return fmt.Sprintf("<i>–≠–Ω–µ—Ä–≥–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å: %s</i>", Energy(e))
}

func Eaten(who string, is []*item.Item) string {
	if len(is) == 0 {
		return NoFood
	}
	emoji, verb := "ü•§", "–≤—ã–ø–∏–ª(–∞)"
	c := NewConnector(", ")
	for _, i := range is {
		if f, ok := i.Value.(*food.Food); !ok || !f.Beverage() {
			emoji, verb = "üçä", "—Å—ä–µ–ª(–∞)"
		}
		c.Add(Item(i))
	}
	return fmt.Sprintf("%s %s %s %s.", emoji, Name(who), verb, c.String())
}

func CannotEat(is ...*item.Item) string {
	c := NewConnector(", ")
	for _, i := range is {
		c.Add(Item(i))
	}
	return fmt.Sprintf("ü§Æ –ù–µ–ª—å–∑—è —Å—ä–µ—Å—Ç—å %s.", c.String())
}

func Fish(f *fishing.Fish) string {
	return fmt.Sprintf("<code>%s</code>", f)
}

func Rating(r float64) string {
	return fmt.Sprintf("<code>‚öúÔ∏è %.1f</code>", r)
}

func Strength(s float64) string {
	return fmt.Sprintf("<code>üí™ %.1f</code>", s)
}

func Luck(l float64) string {
	return fmt.Sprintf("<code>üçÄ %.1f</code>", 10*l)
}

func Messages(n int) string {
	return fmt.Sprintf("<code>‚úâÔ∏è %d</code>", n)
}

func Status(s string) string {
	return fmt.Sprintf("<i>%s</i>", s)
}

func Key(k int) string {
	return fmt.Sprintf("<code>#%d</code>", k)
}

func BadKey(k int) string {
	return fmt.Sprintf("üîñ –ü—Ä–µ–¥–º–µ—Ç %s –Ω–µ –Ω–∞–π–¥–µ–Ω.", Key(k))
}

func Mods(ms []*game.Mod) string {
	c := NewConnector("\n")
	for _, m := range ms {
		c.Add(fmt.Sprintf("<i>%s %s</i>", m.Emoji, m.Description))
	}
	return c.String()
}

func Percentage(p float64) string {
	return fmt.Sprintf("%.1f%%", p*100)
}

func UserBanned(hours int) string {
	return fmt.Sprintf("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ %d %s.", hours, declHours(hours))
}

func CannotDrop(i *item.Item) string {
	return fmt.Sprintf("‚ôª –ù–µ–ª—å–∑—è –≤—ã–ª–æ–∂–∏—Ç—å %s.", Item(i))
}

func Dropped(who string, is []*item.Item) string {
	if len(is) == 0 {
		return "‚ôª –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–ª–æ–∂–µ–Ω–æ."
	}
	c := NewConnector(", ")
	for _, i := range is {
		c.Add(Item(i))
	}
	return fmt.Sprintf("‚ôª %s –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ—Ç %s.", Name(who), c.String())
}

func CannotPick(i *item.Item) string {
	return fmt.Sprintf("‚ôª –ù–µ–ª—å–∑—è –≤–∑—è—Ç—å %s.", Item(i))
}

func Picked(who string, is []*item.Item) string {
	if len(is) == 0 {
		return "ü´≥ –ù–∏—á–µ–≥–æ –Ω–µ –≤–∑—è—Ç–æ."
	}
	c := NewConnector(", ")
	for _, i := range is {
		c.Add(Item(i))
	}
	return fmt.Sprintf("ü´≥ %s –±–µ—Ä—ë—Ç %s.", Name(who), c.String())
}

func Cashout(who string, n int) string {
	return fmt.Sprintf("üíµ %s –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç %s.", Name(who), Money(n))
}

func CannotSell(i *item.Item) string {
	return fmt.Sprintf("üè™ –ù–µ–ª—å–∑—è –ø—Ä–æ–¥–∞—Ç—å %s.", Item(i))
}

func Sold(who string, profit int, is []*item.Item) string {
	if len(is) == 0 {
		return "üíµ –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–¥–∞–Ω–æ."
	}
	c := NewConnector(", ")
	for _, i := range is {
		c.Add(Item(i))
	}
	return fmt.Sprintf("üíµ %s –ø—Ä–æ–¥–∞—ë—Ç %s –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç %s.",
		Name(who), c.String(), Money(profit))
}

func Bought(who string, cost int, is []*item.Item) string {
	if len(is) == 0 {
		return "üíµ –ù–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ."
	}
	c := NewConnector(", ")
	for _, i := range is {
		c.Add(Item(i))
	}
	return fmt.Sprintf("üõí %s –ø–æ–∫—É–ø–∞–µ—Ç %s –∑–∞ %s.",
		Name(who), c.String(), Money(cost))
}

func Crafted(who string, is ...*item.Item) string {
	if len(is) == 0 {
		return "üõ† –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ."
	}
	c := NewConnector(", ")
	for _, i := range is {
		c.Add(Item(i))
	}
	return fmt.Sprintf("üõ† %s –ø–æ–ª—É—á–∞–µ—Ç %s.", Name(who), c.String())
}

func BadFishOutcome() string {
	outcomes := [...]string{
		"–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã—É–¥–∏—Ç—å —Ä—ã–±—É.",
		"–†—ã–±–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å —Å –∫—Ä—é—á–∫–∞.",
		"–†—ã–±–∞ —Å–æ—Ä–≤–∞–ª–∞ –ª–µ—Å–∫—É.",
		"–†—ã–±–∞ —Å–∫—Ä—ã–ª–∞—Å—å –≤ –≤–æ–¥–æ—Ä–æ—Å–ª—è—Ö.",
		"–†—ã–±–∞ –≤—ã—Å–∫–æ–ª—å–∑–Ω—É–ª–∞ –∏–∑ —Ä—É–∫.",
		"–í—ã –æ—Ç–ø—É—Å—Ç–∏–ª–∏ —Ä—ã–±—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –≤–æ–¥—É.",
	}
	return "üé£ " + outcomes[rand.Intn(len(outcomes))]
}

func FishCatch(who string, i *item.Item) string {
	return fmt.Sprintf("üé£ %s –ø–æ–ª—É—á–∞–µ—Ç %s.", Name(who), Item(i))
}

func RecordCatch(p fishing.Parameter, e *fishing.Entry) string {
	var p1, p2 string
	switch p {
	case fishing.Weight:
		p1, p2 = "–≤–µ—Å—É", "—Ç—è–∂—ë–ª–∞—è"
	case fishing.Length:
		p1, p2 = "–¥–ª–∏–Ω–µ", "–±–æ–ª—å—à–∞—è"
	case fishing.Price:
		p1, p2 = "—Ü–µ–Ω–µ", "–¥–æ—Ä–æ–≥–∞—è"
	}
	c := NewConnector("\n")
	c.Add("<b>üéâ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –ø–æ %s —Ä—ã–±—ã!</b>")
	c.Add("%s —ç—Ç–æ —Å–∞–º–∞—è %s —Ä—ã–±–∞ –∏–∑ –≤—Å–µ—Ö –ø–æ–π–º–∞–Ω–Ω—ã—Ö.")
	return fmt.Sprintf(c.String(), p1, Fish(e.Fish), p2)
}

func FishingRecords(price []*fishing.Entry, weight, length *fishing.Entry) string {
	c := NewConnector("\n")
	c.Add("<b>üèÜ –ö–Ω–∏–≥–∞ —Ä–µ–∫–æ—Ä–¥–æ–≤ üé£</b>")
	c.Add("")
	c.Add("<b>üí∞ –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ —Ä—ã–±—ã:</b>")
	for i, e := range price {
		n := fmt.Sprintf("<b><i>%s</i></b>. ", Link(e.ID, strconv.Itoa(1+i)))
		c.Add(n + Fish(e.Fish) + ", " + Money(int(e.Fish.Price())))
	}
	c.Add("")
	c.Add("<b>‚öñ –°–∞–º–∞—è —Ç—è–∂—ë–ª–∞—è —Ä—ã–±–∞:</b>")
	c.Add(fmt.Sprintf("<b><i>%s</i></b> %s", Link(weight.ID, "‚Üí"), Fish(weight.Fish)))
	c.Add("")
	c.Add("<b>üìê –°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Ä—ã–±–∞:</b>")
	c.Add(fmt.Sprintf("<b><i>%s</i></b> %s", Link(length.ID, "‚Üí"), Fish(length.Fish)))
	return c.String()
}

func Fight(u1, u2 *game.User) string {
	const fighter = "%s <code>[%.2f]</code>"
	const versus = "<b><i>vs.</i></b>"
	const fight = "‚öîÔ∏è " + fighter + " " + versus + " " + fighter
	return fmt.Sprintf(fight,
		Name(Link(u1.ID, u1.Name)),
		u1.Strength(),
		Name(Link(u2.ID, u2.Name)),
		u2.Strength())
}

func WinnerTook(who string, i *item.Item) string {
	return fmt.Sprintf("ü•ä %s –∑–∞–±–∏—Ä–∞–µ—Ç %s —É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ.", Name(who), Item(i))
}

func AttackerDrop(who string, i *item.Item) string {
	return fmt.Sprintf("üåÄ %s —É—Ä–æ–Ω–∏–ª %s –≤–æ –≤—Ä–µ–º—è –¥—Ä–∞–∫–∏.", Name(who), Item(i))
}

func Win(who string, elo float64) string {
	return fmt.Sprintf("üèÜ %s <code>(+%.1f)</code> –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –≤ –ø–æ–µ–¥–∏–Ω–∫–µ.", Name(who), elo)
}

func Profile(u *game.User) string {
	head := fmt.Sprintf("<b>üìá %s: –ü—Ä–æ—Ñ–∏–ª—å</b>", Name(Link(u.ID, u.Name)))
	entries := []string{
		Energy(u.Energy),
		Reputation{u.Reputation.Score(), u.ReputationFactor}.lhsEmoji(),
		Luck(u.Luck()),
		Strength(u.Strength()),
		Rating(u.Rating),
		Messages(u.Messages),
		Balance(u.Balance().Total()),
	}
	table := profileTable(entries)
	mods := Mods(u.Mods())
	status := Status(u.Status)
	return fmt.Sprintf("%s\n%s\n\n%s\n\n%s", head, table, mods, status)
}

func profileTable(entries []string) string {
	lines := []string{}
	for i, e := range entries {
		if i%2 == 0 {
			x := fmt.Sprintf("%-21s", e)
			lines = append(lines, x)
		} else {
			x := fmt.Sprintf(" %s", e)
			lines[len(lines)-1] += x
		}
	}
	for i, line := range lines {
		lines[i] = "<code>" + line + "</code>"
	}
	return strings.Join(lines, "\n")
}

func FundsCollected(who string, fs []*game.Fund) string {
	if len(fs) == 0 {
		return "üßæ –°—Ä–µ–¥—Å—Ç–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
	}
	c := NewConnector("\n")
	c.Add(fmt.Sprintf("<b>üßæ %s –ø–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞:</b>", Name(who)))
	for i, f := range fs {
		if rest := len(fs) - i; i >= 15 && rest >= 5 {
			c.Add(fmt.Sprintf("<i>...–∏ –µ—â—ë <code>%d</code> —à—Ç.</i>", rest))
			break
		}
		c.Add(fmt.Sprintf("<code> ‚Ä¢ </code>%s <i>%s</i>", Item(f.Item), f.Source))
	}
	return c.String()
}

func GetJob(who string, hours int) string {
	const format = "üíº %s –ø–æ–ª—É—á–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–∞ <code>%d %s</code>."
	return fmt.Sprintf(format, Name(who), hours, declHours(hours))
}

func MarketShift(who string, s game.Shift) string {
	const clock = "<code>%02d:%02d</code>"
	const format = "ü™™ –° " + clock + " –ø–æ " + clock + " –≤–∞—Å –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç %s."
	return fmt.Sprintf(format,
		s.From.Hour(), s.From.Minute(),
		s.To.Hour(), s.To.Minute(),
		Name(who))
}

func Market(who string, m *game.Market) string {
	c := NewConnector("\n")
	c.Add(fmt.Sprintf("<b>%v</b>", m))
	if who != "" {
		c.Add(MarketShift(who, m.Shift))
	}
	c.Add(Products(m.Products()))
	return c.String()
}

func CannotSplit(i *item.Item) string {
	return fmt.Sprintf("üóÉ –ù–µ–ª—å–∑—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å %s.", Item(i))
}

func Splitted(who string, i *item.Item) string {
	return fmt.Sprintf("üóÉ %s –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç %s.", Name(who), Item(i))
}

func Index(i int) string {
	return fmt.Sprintf("<b><i>%d.</i></b>", 1+i)
}

func FriendRemoved(who1, who2 string) string {
	return fmt.Sprintf("üò∞ %s —Ç–µ–ø–µ—Ä—å –Ω–µ –¥—Ä—É–∂–∏—Ç —Å %s.", Name(who1), Name(who2))
}

func FriendAdded(who1, who2 string) string {
	return fmt.Sprintf("üòä %s —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∂–∏—Ç —Å %s.", Name(who1), Name(who2))
}

func MutualFriends(who1, who2 string) string {
	return fmt.Sprintf("ü§ù %s –∏ %s —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è.", Name(who1), Name(who2))
}

type Friend struct {
	Who    string
	Mutual bool
}

func FriendList(who string, friends []Friend) string {
	mutual := 0
	c := NewConnector("\n")
	for _, f := range friends {
		e := "üíî"
		if f.Mutual {
			mutual++
			e = "‚ù§Ô∏è"
		}
		c.Add(e + " " + Name(f.Who))
	}
	header := fmt.Sprintf("<b>üë• %s: –î—Ä—É–∑—å—è <code>[%d/%d]</code></b>",
		Name(who), mutual, len(friends))
	return header + "\n" + c.String()
}

func CannotTransfer(i *item.Item) string {
	return fmt.Sprintf("üì¶ –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å %s.", Item(i))
}

func Transfered(sender, receiver string, is ...*item.Item) string {
	if len(is) == 0 {
		return "üì¶ –ù–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ."
	}
	c := NewConnector(", ")
	for _, i := range is {
		c.Add(Item(i))
	}
	const help = "<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>!–ø–æ–ª—É—á–∏—Ç—å</code>, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã.</i>"
	message := fmt.Sprintf("üì¶ %s –ø–µ—Ä–µ–¥–∞—ë—Ç %s %s.", Name(sender), Name(receiver), c.String())
	return message + "\n\n" + help
}

func Duration(d time.Duration) string {
	c := NewConnector(" ")
	h := int(d.Hours())
	m := int(d.Minutes()) % 60
	s := int(d.Seconds()) % 60
	if h > 0 {
		c.Add(fmt.Sprintf("%d —á.", h))
	}
	if m > 0 {
		c.Add(fmt.Sprintf("%d –º–∏–Ω.", m))
	}
	if s > 0 {
		c.Add(fmt.Sprintf("%d —Å–µ–∫.", s))
	}
	return c.String()
}

func Title(s string) string {
	return fmt.Sprintf("<b>¬´%s¬ª</b>", s)
}

func declHours(n int) string {
	suffix := "–æ–≤"
	switch n {
	case 1:
		suffix = ""
	case 2, 3, 4:
		suffix = "–∞"
	}
	return "—á–∞—Å" + suffix
}

func declMinutes(n int) string {
	suffix := ""
	switch n {
	case 1:
		suffix = "–∞"
	case 2, 3, 4:
		suffix = "—ã"
	}
	return "–º–∏–Ω—É—Ç" + suffix
}

func declFish(n int) string {
	suffix := ""
	switch n {
	case 1:
		suffix = "–∞"
	case 2, 3, 4:
		suffix = "—ã"
	}
	return "—Ä—ã–±" + suffix
}

func declCaught(n int) string {
	if n == 1 {
		return "–ü–æ–π–º–∞–Ω–∞"
	}
	return "–ü–æ–π–º–∞–Ω–æ"
}
