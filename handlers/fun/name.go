package fun

import (
	"fmt"
	"html"
	"nechego/handlers"
	tu "nechego/teleutil"
	"unicode/utf8"

	tele "gopkg.in/telebot.v3"
)

type Name struct{}

var nameRe = handlers.NewRegexp("^!–∏–º—è (.+)")

func (h *Name) Match(c tele.Context) bool {
	return nameRe.MatchString(c.Text())
}

func (h *Name) Handle(c tele.Context) error {
	u := tu.Reply(c)
	if u == nil {
		u = c.Sender()
	}
	name := parseName(c.Text())
	if !validNameLength(name) {
		return c.Send(nameLengthExceeded(maxNameLength))
	}
	if err := promoteUser(c, u); err != nil {
		return err
	}
	if err := setName(c, u, name); err != nil {
		return c.Send(setNameFail())
	}
	return c.Send(setNameSuccess(name), tele.ModeHTML)
}

func parseName(s string) string {
	return html.EscapeString(nameRe.FindStringSubmatch(s)[1])
}

const maxNameLength = 16

func validNameLength(s string) bool {
	return utf8.RuneCountInString(s) <= maxNameLength
}

func promoteUser(c tele.Context, u *tele.User) error {
	return tu.Promote(c, tu.Member(c, u))
}

func setName(c tele.Context, u *tele.User, name string) error {
	return c.Bot().SetAdminTitle(c.Chat(), u, name)
}

func setNameSuccess(name string) string {
	return fmt.Sprintf("–ò–º—è <b>%s</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", name)
}

func setNameFail() string {
	return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è."
}

func nameLengthExceeded(max int) string {
	return fmt.Sprintf("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ %d —Å–∏–º–≤–æ–ª–æ–≤.", max)
}

type CheckName struct{}

func (h *CheckName) Match(c tele.Context) bool {
	return handlers.HasPrefix(c.Text(), "!–∏–º—è")
}

func (h *CheckName) Handle(c tele.Context) error {
	l := tu.Link(c, c.Sender())
	s := fmt.Sprintf("–í–∞—à–µ –∏–º—è: <b>%s</b> üîñ", l)
	return c.Send(s, tele.ModeHTML)
}
