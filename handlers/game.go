package handlers

import (
	"errors"
	"fmt"
	"html"
	"math/rand"
	"nechego/format"
	"nechego/game"
	"nechego/teleutil"
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
	"unicode/utf8"

	tele "gopkg.in/telebot.v3"
)

type Save struct {
	Universe *game.Universe
}

var saveRe = regexp.MustCompile("^!—Å–æ—Ö—Ä–∞–Ω")

func (h *Save) Match(s string) bool {
	return saveRe.MatchString(s)
}

func (h *Save) Handle(c tele.Context) error {
	if err := h.Universe.SaveAll(); err != nil {
		return err
	}
	return c.Send("üíæ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
}

type Name struct{}

var nameRe = regexp.MustCompile("!–∏–º—è (.*)")

func (h *Name) Match(s string) bool {
	return nameRe.MatchString(s)
}

func (h *Name) Handle(c tele.Context) error {
	name := html.EscapeString(teleutil.Args(c, nameRe)[1])
	const max = 16
	if utf8.RuneCountInString(name) > max {
		return c.Send(fmt.Sprintf("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ %d —Å–∏–º–≤–æ–ª–æ–≤.", max))
	}

	if err := teleutil.Promote(c, teleutil.Member(c, c.Sender())); err != nil {
		return err
	}
	if err := c.Bot().SetAdminTitle(c.Chat(), c.Sender(), name); err != nil {
		return err
	}
	return c.Send(fmt.Sprintf("–ò–º—è <b>%s</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", name), tele.ModeHTML)
}

type Inventory struct {
	Universe *game.Universe
}

var inventoryRe = regexp.MustCompile("^!–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")

func (h *Inventory) Match(s string) bool {
	return inventoryRe.MatchString(s)
}

func (h *Inventory) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	u, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}
	items := u.Inventory.List()
	mention := teleutil.Mention(c, teleutil.Member(c, c.Sender()))
	head := fmt.Sprintf("<b>üóÑ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: %s</b>", mention)
	lines := append([]string{head}, format.Items(items)...)
	return c.Send(strings.Join(lines, "\n"), tele.ModeHTML)
}

type Drop struct {
	Universe *game.Universe
}

var dropRe = regexp.MustCompile("^!(–≤—ã–∫–∏–Ω—É—Ç—å|–≤—ã–±—Ä–æ—Å–∏—Ç—å|–≤—ã–ª–æ–∂–∏—Ç—å) (.*)")

func (h *Drop) Match(s string) bool {
	return dropRe.MatchString(s)
}

func (h *Drop) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}
	for _, key := range teleutil.NumArg(c, dropRe, 2) {
		item, ok := user.Inventory.ByKey(key)
		if !ok {
			return c.Send(fmt.Sprintf("üóÑ –ü—Ä–µ–¥–º–µ—Ç–∞ %s –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.",
				format.Key(key)), tele.ModeHTML)
		}
		if ok := user.Inventory.Move(world.Floor, item); !ok {
			return c.Send(fmt.Sprintf("‚ôª –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–æ—Å–∏—Ç—å %s.",
				format.Item(item)), tele.ModeHTML)
		}
		c.Send(fmt.Sprintf("üöÆ –í—ã –≤—ã–±—Ä–æ—Å–∏–ª–∏ %s.",
			format.Item(item)), tele.ModeHTML)
	}
	return nil
}

type Pick struct {
	Universe *game.Universe
}

var pickRe = regexp.MustCompile("^!(–≤–∑—è—Ç—å|–ø–æ–¥–æ–±—Ä–∞—Ç—å) (.*)")

func (h *Pick) Match(s string) bool {
	return pickRe.MatchString(s)
}

func (h *Pick) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}
	for _, key := range teleutil.NumArg(c, pickRe, 2) {
		item, ok := world.Floor.ByKey(key)
		if !ok {
			return c.Send(fmt.Sprintf("üóÑ –ü—Ä–µ–¥–º–µ—Ç–∞ %s –Ω–µ—Ç –Ω–∞ –ø–æ–ª—É.",
				format.Key(key)), tele.ModeHTML)
		}
		if ok := world.Floor.Move(user.Inventory, item); !ok {
			return c.Send(fmt.Sprintf("‚ôª –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å %s.",
				format.Item(item)), tele.ModeHTML)
		}
		c.Send(fmt.Sprintf("ü´≥ –í—ã –≤–∑—è–ª–∏ %s.",
			format.Item(item)), tele.ModeHTML)
	}
	return nil
}

type Floor struct {
	Universe *game.Universe
}

var floorRe = regexp.MustCompile("^!–ø–æ–ª")

func (h *Floor) Match(s string) bool {
	return floorRe.MatchString(s)
}

func (h *Floor) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	items := world.Floor.List()
	head := "<b>üóë –ü–æ–ª</b>"
	lines := append([]string{head}, format.Items(items)...)
	return c.Send(strings.Join(lines, "\n"), tele.ModeHTML)
}

type Market struct {
	Universe *game.Universe
}

var marketRe = regexp.MustCompile("^!–º–∞–≥–∞–∑–∏–Ω")

func (h *Market) Match(s string) bool {
	return marketRe.MatchString(s)
}

func (h *Market) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	products := world.Market.Products()
	head := "<b>üè™ –ú–∞–≥–∞–∑–∏–Ω</b>"
	lines := append([]string{head}, format.Products(products)...)
	return c.Send(strings.Join(lines, "\n"), tele.ModeHTML)
}

type Buy struct {
	Universe *game.Universe
}

var buyRe = regexp.MustCompile("^!–∫—É–ø–∏—Ç—å (.*)")

func (h *Buy) Match(s string) bool {
	return buyRe.MatchString(s)
}

func (h *Buy) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	key, err := strconv.Atoi(teleutil.Args(c, buyRe)[1])
	if err != nil {
		return c.Send("#‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞.")
	}
	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}
	product, ok := user.Buy(world.Market, key)
	if !ok {
		return c.Send("üíµ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
	}
	return c.Send(fmt.Sprintf("üõí –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ %s –∑–∞ %s.",
		format.Item(product.Item), format.Money(product.Price)), tele.ModeHTML)
}

type Eat struct {
	Universe *game.Universe
}

var eatRe = regexp.MustCompile("^!—Å[—ä—å]–µ—Å—Ç—å (.*)")

func (h *Eat) Match(s string) bool {
	return eatRe.MatchString(s)
}

func (h *Eat) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return c.Send("user not found")
	}
	if user.Energy == user.EnergyCap {
		return c.Send("üçä –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –µ—Å—Ç—å.")
	}
	key, err := strconv.Atoi(teleutil.Args(c, eatRe)[1])
	if err != nil {
		return c.Send("#‚É£ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞.")
	}
	item, ok := user.Inventory.ByKey(key)
	if !ok {
		return c.Send("üóÑ –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.")
	}
	if ok := user.Eat(item); !ok {
		return c.Send("ü§Æ")
	}
	return c.Send(fmt.Sprintf("üçä –í—ã —Å—ä–µ–ª–∏ %s.\n\n<i>–≠–Ω–µ—Ä–≥–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å: %s</i>",
		format.Item(item), format.Energy(user.Energy)), tele.ModeHTML)
}

type Fish struct {
	Universe *game.Universe
}

var fishRe = regexp.MustCompile("^!—Ä—ã–±–∞–ª–∫–∞")

func (h *Fish) Match(s string) bool {
	return fishRe.MatchString(s)
}

func (h *Fish) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}
	rod, ok := user.FishingRod()
	if !ok {
		return c.Send("üé£ –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ —É–¥–æ—á–∫—É, –ø—Ä–µ–∂–¥–µ —á–µ–º —Ä—ã–±–∞—á–∏—Ç—å.")
	}
	if ok := user.SpendEnergy(1); !ok {
		return c.Send("‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏.")
	}
	fish := user.Fish(rod)
	if rod.Durability < 0 {
		c.Send("üé£ –í–∞—à–∞ —É–¥–æ—á–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å.")
	}
	if rand.Float64() < 0.5 {
		outcomes := [...]string{
			"–í—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã—É–¥–∏—Ç—å —Ä—ã–±—É.",
			"–†—ã–±–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å —Å –∫—Ä—é—á–∫–∞.",
			"–†—ã–±–∞ —Å–æ—Ä–≤–∞–ª–∞ –ª–µ—Å–∫—É.",
			"–†—ã–±–∞ —Å–∫—Ä—ã–ª–∞—Å—å –≤ –≤–æ–¥–æ—Ä–æ—Å–ª—è—Ö.",
			"–†—ã–±–∞ –≤—ã—Å–∫–æ–ª—å–∑–Ω—É–ª–∞ –∏–∑ —Ä—É–∫.",
			"–í—ã –æ—Ç–ø—É—Å—Ç–∏–ª–∏ —Ä—ã–±—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –≤–æ–¥—É.",
		}
		return c.Send("üé£ " + outcomes[rand.Intn(len(outcomes))])
	}
	user.Inventory.Add(&game.Item{
		Type:         game.ItemTypeFish,
		Transferable: true,
		Value:        fish,
	})
	mention := teleutil.Mention(c, teleutil.Member(c, c.Sender()))
	return c.Send(fmt.Sprintf("üé£ %s –ø–æ–ª—É—á–∞–µ—Ç —Ä—ã–±—É: %s",
		mention, format.Fish(fish)), tele.ModeHTML)
}

type Status struct {
	Universe *game.Universe
}

var statusRe = regexp.MustCompile("^!—Å—Ç–∞—Ç—É—Å (.*)")

func (h *Status) Match(s string) bool {
	return statusRe.MatchString(s)
}

func (h *Status) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}
	status := teleutil.Args(c, statusRe)[1]
	const maxlen = 120
	if utf8.RuneCountInString(status) > maxlen {
		return c.Send(fmt.Sprintf("üí¨ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ %d —Å–∏–º–≤–æ–ª–æ–≤.", maxlen))
	}
	user.Status = status
	return c.Send("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
}

type Sell struct {
	Universe *game.Universe
}

var sellRe = regexp.MustCompile("^!–ø—Ä–æ–¥–∞—Ç—å (.*)")

func (h *Sell) Match(s string) bool {
	return sellRe.MatchString(s)
}

func (h *Sell) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}
	items := teleutil.NumArg(c, sellRe, 1)
	for _, key := range items {
		item, ok := user.Inventory.ByKey(key)
		if !ok {
			return c.Send(fmt.Sprintf("üóÑ –ü—Ä–µ–¥–º–µ—Ç–∞ %s –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.",
				format.Key(key)), tele.ModeHTML)
		}
		profit, ok := user.Sell(item)
		if !ok {
			return c.Send(fmt.Sprintf("‚ÑπÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å %s.",
				format.Item(item)), tele.ModeHTML)
		}
		c.Send(fmt.Sprintf("üíµ –í—ã –ø—Ä–æ–¥–∞–ª–∏ %s, –∑–∞—Ä–∞–±–æ—Ç–∞–≤ %s.",
			format.Item(item), format.Money(profit)), tele.ModeHTML)
	}
	return nil
}

type Stack struct {
	Universe *game.Universe
}

var stackRe = regexp.MustCompile("^!—Å–ª–æ–∂–∏—Ç—å")

func (h *Stack) Match(s string) bool {
	return stackRe.MatchString(s)
}

func (h *Stack) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}
	if ok := user.Stack(); ok {
		return c.Send("üíµ –í—ã —Å–ª–æ–∂–∏–ª–∏ –¥–µ–Ω—å–≥–∏.")
	}
	return c.Send("‚úÖ")
}

type Fight struct {
	Universe *game.Universe
}

var fightRe = regexp.MustCompile("^!(–¥—Ä–∞–∫–∞|–¥—É—ç–ª—å|–ø–æ–µ–¥–∏–Ω–æ–∫|–∞—Ç–∞–∫–∞|–±–∏—Ç–≤–∞|—Å—Ö–≤–∞—Ç–∫–∞|—Å—Ä–∞–∂–µ–Ω–∏–µ|–±–æ–π|–±–æ—Ä—å–±–∞)")

func (h *Fight) Match(s string) bool {
	return fightRe.MatchString(s)
}

func (h *Fight) Handle(c tele.Context) error {
	reply, ok := teleutil.Reply(c)
	if !ok {
		return c.Send("‚úâÔ∏è –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	}
	if c.Sender().ID == reply.ID {
		return c.Send("üõ°Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∞—Å—Ç—å –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
	}

	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}
	opnt, ok := world.UserByID(reply.ID)
	if !ok {
		return errors.New("opponent not found")
	}
	if ok := user.SpendEnergy(1); !ok {
		return c.Send("‚ö° –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏.")
	}
	c.Send(fmt.Sprintf("‚öîÔ∏è <b>%s</b> <code>[%.2f]</code> <b><i>vs</i></b> <b>%s</b> <code>[%.2f]</code>",
		teleutil.Mention(c, user.TUID), user.Strength(),
		teleutil.Mention(c, opnt.TUID), opnt.Strength()),
		tele.ModeHTML)
	winner, loser, rating := user.Fight(opnt)
	winnerMent := teleutil.Mention(c, winner.TUID)
	if rand.Float64() < 0.25 {
		if item, ok := loser.Inventory.Random(); ok {
			if ok := loser.Inventory.Move(winner.Inventory, item); ok {
				c.Send(fmt.Sprintf("ü•ä %s –∑–∞–±–∏—Ä–∞–µ—Ç %s —É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ.",
					winnerMent, format.Item(item)), tele.ModeHTML)
			}
		}
	}
	return c.Send(fmt.Sprintf("üèÜ %s <code>(+%.1f)</code> –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –≤ –ø–æ–µ–¥–∏–Ω–∫–µ.",
		winnerMent, rating), tele.ModeHTML)
}

type Profile struct {
	Universe   *game.Universe
	AvatarPath string
}

var profileRe = regexp.MustCompile("^!–ø—Ä–æ—Ñ–∏–ª—å")

func (h *Profile) Match(s string) bool {
	return profileRe.MatchString(s)
}

func (h *Profile) Handle(c tele.Context) error {
	world := h.Universe.MustWorld(c.Chat().ID)
	world.Lock()
	defer world.Unlock()

	user, ok := world.UserByID(c.Sender().ID)
	if !ok {
		return errors.New("user not found")
	}

	const profile = "üìá <b>%s %s</b>\n<code>%s  %s  %s  %s</code>\n\n%s\n\n%s\n\n%s"
	mods := user.Modset().List()
	out := fmt.Sprintf(profile,
		format.ModifierTitles(mods),
		teleutil.Mention(c, c.Sender()),
		format.Energy(user.Energy),
		format.Rating(user.Rating),
		format.Strength(user.Strength()),
		format.Messages(user.Messages),
		format.ModifierDescriptions(mods),
		format.ModifierEmojis(mods),
		format.Status(user.Status),
	)
	if a, ok := avatar(h.AvatarPath, c.Sender().ID); ok {
		a.Caption = out
		return c.Send(a, tele.ModeHTML)
	}
	return c.Send(out, tele.ModeHTML)
}

func avatar(dir string, id int64) (a *tele.Photo, ok bool) {
	_, err := os.Stat(dir)
	if err != nil {
		return nil, false
	}
	f := tele.FromDisk(filepath.Join(dir, strconv.FormatInt(id, 10)))
	if f.OnDisk() {
		return &tele.Photo{File: f}, true
	}
	return nil, false
}
