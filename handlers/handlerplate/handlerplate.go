package main

import (
	"fmt"
	"io"
	"log"
	"os"
	"regexp"
	"strings"
)

var handlerRE = regexp.MustCompile(`^func \([a-z]* \*?([A-z]*)\) Handle`)

func main() {
	types := []string{}
	for _, file := range os.Args[1:] {
		data, err := os.ReadFile(file)
		if err != nil {
			log.Fatal(err)
		}
		for _, line := range strings.Split(string(data), "\n") {
			if !handlerRE.MatchString(line) {
				continue
			}
			types = append(types, handlerRE.FindStringSubmatch(line)[1])
		}
	}

	out, err := os.Create("handler_id.go")
	if err != nil {
		log.Fatal(err)
	}
	head(out)
	constants(out, types)
	methods(out, types)
}

func head(w io.Writer) {
	fmt.Fprint(w, "// Code generated by "+strings.Join(os.Args, " ")+"; DO NOT EDIT.\n")
	fmt.Fprint(w, "package handlers\n\n")
	fmt.Fprint(w, "type HandlerID int\n\n")
}

func methods(w io.Writer, types []string) {
	for _, t := range types {
		fmt.Fprintf(w, "func (_ *%s) Self() HandlerID { return %sHandler }\n",
			t, t)
	}
}

func constants(w io.Writer, types []string) {
	fmt.Fprintf(w, "const (\n")
	fmt.Fprintf(w, "\tNoHandler HandlerID = iota\n")
	for _, t := range types {
		fmt.Fprintf(w, "\t%sHandler\n", t)
	}
	fmt.Fprintf(w, ")\n\n")
}
