package handlers

import (
	"fmt"
	"nechego/game"
	tu "nechego/teleutil"
	"regexp"

	tele "gopkg.in/telebot.v3"
)

// Handler is a central concept of this package.
// Each type intended to process Telegram events should implement Handler.
type Handler interface {
	// Match returns true if the handler should process the given
	// input. It must not have any side effects.
	Match(s string) bool

	// Handle processes a Telegram event, assuming matching input.
	Handle(c tele.Context) error

	// Self is generated by handlerplate.
	Self() HandlerID
}

//go:generate handlerplate basic.go calc.go daily.go game.go phone.go farm.go auction.go actions.go
//go:generate stringer -type=HandlerID -output=handlers_string.go

// re compiles s as a case-insensitive regular expression.
func re(s string) *regexp.Regexp {
	return regexp.MustCompile("(?i)" + s)
}

type WorldHandler interface {
	HandleWorld(c tele.Context, w *game.World) error
}

func HandleWorld(c tele.Context, u *game.Universe, h WorldHandler) error {
	w, err := u.World(c.Chat().ID)
	if err != nil {
		return fmt.Errorf("HandleWorld: cannot get world: %s", err)
	}
	w.Lock()
	defer w.Unlock()
	return h.HandleWorld(c, w)
}

func CurrentUser(c tele.Context, w *game.World) *game.User {
	return w.UserByID(c.Sender().ID)
}

func RepliedUser(c tele.Context, w *game.World) (u *game.User, ok bool) {
	r, ok := tu.Reply(c)
	if !ok {
		return nil, false
	}
	return w.UserByID(r.ID), true
}
