package input

import (
	"regexp"
	"strings"
)

type Command int

const (
	CommandUnknown Command = iota
	CommandProbability
	CommandWho
	CommandCat
	CommandTitle
	CommandAnime
	CommandFurry
	CommandFlag
	CommandPerson
	CommandHorse
	CommandArt
	CommandCar
	CommandPair
	CommandEblan
	CommandMasyunya
	CommandPoppy
	CommandHello
	CommandMouse
	CommandWeather
	CommandTikTok
	CommandList
	CommandTop
	CommandBasili
	CommandCasper
	CommandZeus
	CommandPic
	CommandDice
	CommandGame
	CommandKeyboardOpen
	CommandKeyboardClose
	CommandTurnOn
	CommandTurnOff
	CommandBan
	CommandUnban
	CommandInfo
	CommandHelp
)

var (
	eblanRe       = regexp.MustCompile("(?i)^![–∏–µ][–±6–ø*]?–ª–∞–Ω[–ê-—è]* –¥–Ω—è")
	masyunyaRe    = regexp.MustCompile("(?i)^(!–º–∞[–Ω—Å]—é[–Ω—Å][–∞-—è]*[–ø–∞—è])")
	helloRe       = regexp.MustCompile(constructHelloRe("–ø[—Ä–ª]–∏–≤–µ—Ç", "—Ö–∞–π", "–∑–¥[–∞–æ]—Ä–æ–≤", "–∫—É", "–∑–¥—Ä–∞–≤"))
	weatherRe     = regexp.MustCompile("(?i)^!–ø–æ–≥–æ–¥–∞ ([-–ê-—è]+)")
	probabilityRe = regexp.MustCompile("(?i)^!–∏–Ω—Ñ–∞ *(.*)")
	whoRe         = regexp.MustCompile("(?i)^!–∫—Ç–æ *(.*)")
	listRe        = regexp.MustCompile("(?i)^!—Å–ø–∏—Å–æ–∫ *(.*)")
	topRe         = regexp.MustCompile("(?i)^!—Ç–æ–ø[- ]*(\\d*) *(.*)")
)

// recognizeCommand returns the command contained in the input string.
func recognizeCommand(s string) Command {
	switch {
	case probabilityRe.MatchString(s):
		return CommandProbability
	case whoRe.MatchString(s):
		return CommandWho
	case startsWith(s, "!–∏–º—è"):
		return CommandTitle
	case startsWith(s, "!–∞–Ω–∏–º", "!–º—É–ª—å—Ç"):
		return CommandAnime
	case startsWith(s, "!—Ñ—É—Ä"):
		return CommandFurry
	case startsWith(s, "!—Ñ–ª–∞–≥"):
		return CommandFlag
	case startsWith(s, "!—á–µ–ª"):
		return CommandPerson
	case startsWith(s, "!–ª–æ—à–∞–¥—å", "!–∫–æ–Ω—å"):
		return CommandHorse
	case startsWith(s, "!–∞—Ä—Ç"):
		return CommandArt
	case startsWith(s, "!–∞–≤—Ç–æ", "!—Ç–∞—á–∫", "!–º–∞—à–∏–Ω"):
		return CommandCar
	case startsWith(s, "!–ø–∞—Ä–∞ –¥–Ω—è"):
		return CommandPair
	case eblanRe.MatchString(s):
		return CommandEblan
	case masyunyaRe.MatchString(s) || startsWith(s, "–ú–∞—Å—é–Ω—è üéÄ"):
		return CommandMasyunya
	case startsWith(s, "!–ø–∞–ø–ø–∏", "–ü–∞–ø–ø–∏ ü¶ä"):
		return CommandPoppy
	case helloRe.MatchString(s):
		return CommandHello
	case startsWith(s, "!–º—ã—à"):
		return CommandMouse
	case weatherRe.MatchString(s):
		return CommandWeather
	case startsWith(s, "!—Ç–∏–∫—Ç–æ–∫"):
		return CommandTikTok
	case listRe.MatchString(s):
		return CommandList
	case topRe.MatchString(s):
		return CommandTop
	case startsWith(s, "!–∫–æ—Ç –≤–∞—Å–∏–ª–∏—è", "!–∫–æ—à–∫–∞ –≤–∞—Å–∏–ª–∏—è", "!–º–∞—Ä—Å", "!–º—É—Å—è"):
		return CommandBasili
	case startsWith(s, "!–∫–∞—Å–ø", "!–∫–æ—Ç –∫–∞—Å–ø"):
		return CommandCasper
	case startsWith(s, "!–∑–µ–≤—Å"):
		return CommandZeus
	case startsWith(s, "!–∫–æ—Ç", "!–∫–æ—à"):
		return CommandCat
	case startsWith(s, "!–ø–∏–∫"):
		return CommandPic
	case startsWith(s, "!–∫–æ—Å—Ç–∏"):
		return CommandDice
	case startsWith(s, "!–∏–≥—Ä"):
		return CommandGame
	case startsWith(s, "!–∫–ª–∞–≤", "!–æ—Ç–∫—Ä—ã—Ç"):
		return CommandKeyboardOpen
	case startsWith(s, "!–∑–∞–∫—Ä—ã—Ç", "!—Å–∫—Ä—ã—Ç"):
		return CommandKeyboardClose
	case startsWith(s, "!–≤–∫–ª"):
		return CommandTurnOn
	case startsWith(s, "!–≤—ã–∫–ª"):
		return CommandTurnOff
	case startsWith(s, "!–±–∞–Ω"):
		return CommandBan
	case startsWith(s, "!—Ä–∞–∑–±–∞–Ω"):
		return CommandUnban
	case startsWith(s, "!–∏–Ω—Ñ–æ"):
		return CommandInfo
	case startsWith(s, "!–ø–æ–º–æ—â—å", "!–∫–æ–º–∞–Ω–¥—ã"):
		return CommandHelp
	}
	return CommandUnknown
}

// startsWith returns true if the input string starts with one of the specified prefixes; false otherwise.
func startsWith(s string, prefix ...string) bool {
	s = strings.ToLower(s)
	for _, p := range prefix {
		p = strings.ToLower(p)
		if strings.HasPrefix(s, p) {
			return true
		}
	}
	return false
}

const (
	helloPrefix = "((^|[^–∞-—è])"
	helloSuffix = "[–∞-—è]*([^–∞-—è]|$))"
)

func constructHelloRe(hello ...string) string {
	var l []string
	for _, h := range hello {
		l = append(l, helloPrefix+h+helloSuffix)
	}
	return "(?i)" + strings.Join(l, "|")
}
