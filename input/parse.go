package input

import (
	"regexp"
	"strings"
)

// TODO: Parseable is a string, []string, or *regexp.Regexp.
type Parseable interface{}

var (
	eblanRe    = regexp.MustCompile("(?i)^![–∏–µ][–±6–ø*]?–ª[–∞–ø]–Ω[–ê-—è]* –¥–Ω—è")
	masyunyaRe = regexp.MustCompile("(?i)^(!–º–∞[–Ω—Å]—é[–Ω—Å][–∞-—è]*[–ø–∞—è])")
	helloRe    = regexp.MustCompile(
		constructHelloRe("–ø[—Ä–ª]–∏–≤[–∞-—è]*", "—Ö–∞–π", "–∑–¥[–∞–æ]—Ä–æ–≤[–∞-—è]*", "–∫—É", "–∑–¥—Ä–∞–≤[–∞-—è]*"))
	weatherRe     = regexp.MustCompile("(?i)^!–ø–æ–≥–æ–¥–∞ ([-–ê-—è]+)")
	probabilityRe = regexp.MustCompile("(?i)^!–∏–Ω—Ñ–∞ *(.*)")
	whoRe         = regexp.MustCompile("(?i)^!–∫—Ç–æ *(.*)")
	listRe        = regexp.MustCompile("(?i)^!—Å–ø–∏—Å–æ–∫ *(.*)")
	topRe         = regexp.MustCompile("(?i)^!—Ç–æ–ø[- ]*(\\d*) *(.*)")
)

// ParseCommand returns a command corresponding to the input string.
func ParseCommand(s string) Command {
	switch {
	case probabilityRe.MatchString(s):
		return CommandProbability
	case whoRe.MatchString(s):
		return CommandWho
	case startsWith(s, "!–∏–º—è"):
		return CommandTitle
	case startsWith(s, "!–∞–Ω–∏–º", "!–º—É–ª—å—Ç"):
		return CommandAnime
	case startsWith(s, "!—Ñ—É—Ä"):
		return CommandFurry
	case startsWith(s, "!—Ñ–ª–∞–≥"):
		return CommandFlag
	case startsWith(s, "!—á–µ–ª"):
		return CommandPerson
	case startsWith(s, "!–ª–æ—à–∞–¥—å", "!–∫–æ–Ω—å"):
		return CommandHorse
	case startsWith(s, "!–∞—Ä—Ç"):
		return CommandArt
	case startsWith(s, "!–∞–≤—Ç–æ", "!—Ç–∞—á–∫", "!–º–∞—à–∏–Ω"):
		return CommandCar
	case startsWith(s, "!–ø–∞—Ä–∞ –¥–Ω—è"):
		return CommandPair
	case eblanRe.MatchString(s):
		return CommandEblan
	case startsWith(s, "!–∞–¥–º–∏–Ω –¥–Ω—è"):
		return CommandAdmin
	case startsWith(s, "!–¥—Ä–∞–∫–∞", "!–¥—É—ç–ª—å", "!–ø–æ–µ–¥–∏–Ω–æ–∫", "!–±–æ–π", "!—Å—Ä–∞–∂–µ–Ω–∏–µ", "!–±–æ—Ä—å–±–∞", "!–∞—Ç–∞–∫–∞", "!–±–∏—Ç–≤–∞", "!—Å—Ö–≤–∞—Ç–∫–∞"):
		return CommandFight
	case startsWith(s, "!–±–∞–ª–∞–Ω—Å", "!–¥–µ–Ω—å–≥–∏"):
		return CommandBalance
	case startsWith(s, "!–ø–µ—Ä–µ–≤–æ–¥"):
		return CommandTransfer
	case startsWith(s, "!–ø—Ä–æ—Ñ–∏–ª—å", "!—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "!–æ–±–æ –º–Ω–µ"):
		return CommandProfile
	case startsWith(s, "!—Ç–æ–ø –±–æ–≥–∞—Ç", "!—Ç–æ–ø –±–æ–≥–∞—á"):
		return CommandTopRich
	case startsWith(s, "!—Ç–æ–ø –Ω–∏—â–∏—Ö", "!—Ç–æ–ø –±–µ–¥–Ω"):
		return CommandTopPoor
	case startsWith(s, "!–∫–∞–ø–∏—Ç–∞–ª"):
		return CommandCapital
	case startsWith(s, "!—ç–Ω–µ—Ä–≥", "!—Å—Ç–∞–º–∏–Ω–∞"):
		return CommandEnergy
	case startsWith(s, "!—Ä–µ–π—Ç–∏–Ω–≥", "!–º–º—Ä", "!—ç–ª–æ"):
		return CommandRating
	case startsWith(s, "!—É–¥–æ—á–∫–∞"):
		return CommandFishingRod
	case startsWith(s, "!—Ä—ã–±–∞–ª–∫–∞", "!–ª–æ–≤–ª—è —Ä—ã–±", "!–∑–∞–∫–∏–Ω—É—Ç—å —É–¥–æ—á–∫—É"):
		return CommandFishing
	case startsWith(s, "!—Ç–æ–ø —Å–∏–ª"):
		return CommandTopStrong
	case startsWith(s, "!–ø–æ–µ—Å—Ç—å", "!–µ–¥–∞"):
		return CommandEatFish
	case startsWith(s, "!–¥–µ–ø–æ–∑–∏—Ç"):
		return CommandDeposit
	case startsWith(s, "!–æ–±–Ω–∞–ª", "!—Å–Ω—è—Ç—å"):
		return CommandWithdraw
	case startsWith(s, "!–±–∞–Ω–∫"):
		return CommandBank
	case startsWith(s, "!–∫—Ä–µ–¥–∏—Ç"):
		return CommandDebt
	case startsWith(s, "!–ø–æ–≥–∞—Å–∏—Ç—å"):
		return CommandRepay
	case startsWith(s, "!—Ç–æ–ø —Å–ª–∞–±—ã—Ö"):
		return CommandTopWeak
	case startsWith(s, "!–ø–∞—Ä–ª–∞–º–µ–Ω—Ç"):
		return CommandParliament
	case startsWith(s, "!–∏–º–ø–∏—á–º–µ–Ω—Ç"):
		return CommandImpeachment
	case startsWith(s, "!—Ä—ã–±–∞", "!—É–ª–æ–≤"):
		return CommandFishList
	case startsWith(s, "!–∑–∞–º–æ—Ä–æ–∑"):
		return CommandFreezeFish
	case startsWith(s, "!—Ö–æ–ª–æ–¥–∏–ª—å–Ω"):
		return CommandFreezer
	case startsWith(s, "!—Ä–∞–∑–º–æ—Ä–æ–∑"):
		return CommandUnfreezeFish
	case startsWith(s, "!–ø—Ä–æ–¥–∞–∂–∞", "!–ø—Ä–æ–¥–∞—Ç—å"):
		return CommandSellFish
	case startsWith(s, "!—Å–∏–ª–∞"):
		return CommandStrength
	case masyunyaRe.MatchString(s) || startsWith(s, "–ú–∞—Å—é–Ω—è üéÄ"):
		return CommandMasyunya
	case startsWith(s, "!–ø–∞–ø–ø–∏", "–ü–∞–ø–ø–∏ ü¶ä"):
		return CommandPoppy
	case startsWith(s, "!—Å–∏–º–∞", "–°–∏–º–∞ üíñ"):
		return CommandSima
	case helloRe.MatchString(s):
		return CommandHello
	case startsWith(s, "!–º—ã—à"):
		return CommandMouse
	case weatherRe.MatchString(s):
		return CommandWeather
	case startsWith(s, "!—Ç–∏–∫—Ç–æ–∫"):
		return CommandTikTok
	case listRe.MatchString(s):
		return CommandList
	case topRe.MatchString(s):
		return CommandTop
	case startsWith(s, "!–∫–æ—Ç –≤–∞—Å–∏–ª–∏—è", "!–∫–æ—à–∫–∞ –≤–∞—Å–∏–ª–∏—è", "!–º–∞—Ä—Å", "!–º—É—Å—è"):
		return CommandBasili
	case startsWith(s, "!–∫–∞—Å–ø", "!–∫–æ—Ç –∫–∞—Å–ø"):
		return CommandCasper
	case startsWith(s, "!–∑–µ–≤—Å"):
		return CommandZeus
	case startsWith(s, "!–∫–æ—Ç", "!–∫–æ—à"):
		return CommandCat
	case startsWith(s, "!–ø–∏–∫"):
		return CommandPic
	case startsWith(s, "!–∫–æ—Å—Ç–∏"):
		return CommandDice
	case startsWith(s, "!–∏–≥—Ä"):
		return CommandGame
	case startsWith(s, "!–∫–ª–∞–≤", "!–æ—Ç–∫—Ä—ã—Ç"):
		return CommandKeyboardOpen
	case startsWith(s, "!–∑–∞–∫—Ä—ã—Ç", "!—Å–∫—Ä—ã—Ç"):
		return CommandKeyboardClose
	case startsWith(s, "!–≤–∫–ª", "!–ø–æ–¥–∫–ª", "!–ø–æ–¥—Ä—É–±"):
		return CommandTurnOn
	case startsWith(s, "!–≤—ã–∫–ª", "!–æ—Ç–∫–ª"):
		return CommandTurnOff
	case startsWith(s, "!–±–∞–Ω"):
		return CommandBan
	case startsWith(s, "!—Ä–∞–∑–±–∞–Ω"):
		return CommandUnban
	case startsWith(s, "!–∏–Ω—Ñ–æ"):
		return CommandInfo
	case startsWith(s, "!–ø–æ–º–æ—â—å", "!–∫–æ–º–∞–Ω–¥—ã"):
		return CommandHelp
	case startsWith(s, "!–∑–∞–ø—Ä–µ—Ç–∏—Ç—å"):
		return CommandForbid
	case startsWith(s, "!—Ä–∞–∑—Ä–µ—à–∏—Ç—å"):
		return CommandPermit
	case startsWith(s, "!–ø–∏—Ç–æ–º–µ—Ü"):
		return CommandPet
	case startsWith(s, "!–≤–∑—è—Ç—å"):
		return CommandBuyPet
	case startsWith(s, "!–Ω–∞–∑–≤–∞—Ç—å"):
		return CommandNamePet
	case startsWith(s, "!–≤—ã–∫–∏–Ω—É—Ç—å", "!–ø—Ä–æ–≥–Ω–∞—Ç—å", "!–≤—ã–±—Ä–æ—Å–∏—Ç—å", "!–≤—ã–≥–Ω–∞—Ç—å"):
		return CommandDropPet
	}
	return CommandUnknown
}

// startsWith returns true if the input string starts with one of the specified prefixes, false otherwise.
func startsWith(s string, prefix ...string) bool {
	s = strings.ToLower(s)
	for _, p := range prefix {
		p = strings.ToLower(p)
		if strings.HasPrefix(s, p) {
			return true
		}
	}
	return false
}

const (
	helloPrefix = "((^|[^–∞-—è])"
	helloSuffix = "([^–∞-—è]|$))"
)

// constructHelloRe combines the given hello regexps.
func constructHelloRe(hello ...string) string {
	var l []string
	for _, h := range hello {
		l = append(l, helloPrefix+h+helloSuffix)
	}
	return "(?i)" + strings.Join(l, "|")
}
