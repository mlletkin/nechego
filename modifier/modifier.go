package modifier

// Moder is implemented by any value that should have a corresponding modifier.
type Moder interface {
	Mod() (m *Mod, ok bool)
}

type Mod struct {
	Emoji       string
	Multiplier  float64
	Description string
}

func (x *Mod) Mod() (m *Mod, ok bool) {
	return x, true
}

var (
	FullEnergy   = &Mod{"‚ö°Ô∏è", +0.10, "–í—ã –ø–æ–ª–Ω—ã —Å–∏–ª."}
	NoEnergy     = &Mod{"üò£", -0.25, "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É—Å—Ç–∞–≤—à–∏–º."}
	Rich         = &Mod{"üé©", +0.05, "–í—ã –±–æ–≥–∞—Ç—ã."}
	Poor         = &Mod{"", -0.05, "–í—ã –±–µ–¥–Ω—ã."}
	Heavy        = &Mod{"ü™®", -0.35, "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω."}
	RatingFirst  = &Mod{"ü•á", +0.03, "–í—ã –Ω–∞ 1-–º –º–µ—Å—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."}
	RatingSecond = &Mod{"ü•à", +0.02, "–í—ã –Ω–∞ 2-–º –º–µ—Å—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."}
	RatingThird  = &Mod{"ü•â", +0.01, "–í—ã –Ω–∞ 3-–º –º–µ—Å—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ."}
	SMS          = &Mod{"üì©", 0.0, "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."}
)

type Set map[*Mod]bool

func (s Set) Active(m *Mod) bool {
	return s[m]
}

func (s Set) Add(m *Mod) {
	s[m] = true
}

func (s Set) List() []*Mod {
	r := []*Mod{}
	for m := range s {
		r = append(r, m)
	}
	return r
}

func (s Set) Sum() float64 {
	r := 0.0
	for m := range s {
		r += m.Multiplier
	}
	return r
}
