package modifier

type Mod struct {
	Emoji       string
	Multiplier  float64
	Description string
	Title       string
}

var (
	Admin         = &Mod{"üëë", +0.20, "–í—ã –æ—â—É—â–∞–µ—Ç–µ –≤–ª–∞—Å—Ç—å –Ω–∞–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏.", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"}
	Eblan         = &Mod{"üò∏", -0.20, "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –æ—Å–∫–æ—Ä–±–ª–µ–Ω–Ω—ã–º.", "–µ–±–ª–∞–Ω"}
	MuchEnergy    = &Mod{"üç•", +0.20, "–í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–µ–ª–∏.", ""}
	FullEnergy    = &Mod{"‚ö°Ô∏è", +0.10, "–í—ã –ø–æ–ª–Ω—ã —Å–∏–ª.", ""}
	NoEnergy      = &Mod{"üò£", -0.25, "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É—Å—Ç–∞–≤—à–∏–º.", ""}
	TerribleLuck  = &Mod{"‚ò†Ô∏è", -0.50, "–í–∞—Å –ø—Ä–µ—Å–ª–µ–¥—É—é—Ç –Ω–µ—É–¥–∞—á–∏.", ""}
	BadLuck       = &Mod{"", -0.10, "–í–∞–º –Ω–µ –≤–µ–∑–µ—Ç.", ""}
	GoodLuck      = &Mod{"ü§û", +0.10, "–í–∞–º –≤–µ–∑–µ—Ç.", ""}
	ExcellentLuck = &Mod{"üçÄ", +0.30, "–°–µ–≥–æ–¥–Ω—è –≤–∞—à –¥–µ–Ω—å.", ""}
	Rich          = &Mod{"üé©", +0.05, "–í—ã –±–æ–≥–∞—Ç—ã.", "–º–∞–≥–Ω–∞—Ç"}
	Poor          = &Mod{"", -0.05, "–í—ã –±–µ–¥–Ω—ã.", ""}
	Fisher        = &Mod{"üé£", +0.05, "–í—ã –º–æ–∂–µ—Ç–µ —Ä—ã–±–∞—á–∏—Ç—å.", ""}
	Debtor        = &Mod{"üí≥", -0.25, "–£ –≤–∞—Å –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç.", ""}
	Heavy         = &Mod{"ü™®", -0.25, "–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω.", ""}
	RatingFirst   = &Mod{"ü•á", +0.03, "–í—ã –Ω–∞ 1-–º –º–µ—Å—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.", ""}
	RatingSecond  = &Mod{"ü•à", +0.02, "–í—ã –Ω–∞ 2-–º –º–µ—Å—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.", ""}
	RatingThird   = &Mod{"ü•â", +0.01, "–í—ã –Ω–∞ 3-–º –º–µ—Å—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ.", ""}
)

type Set map[*Mod]bool

func (s Set) Active(m *Mod) bool {
	return s[m]
}

func (s Set) Add(m *Mod) {
	s[m] = true
}

func (s Set) List() []*Mod {
	r := []*Mod{}
	for m := range s {
		r = append(r, m)
	}
	return r
}

func (s Set) Sum() float64 {
	r := 0.0
	for m := range s {
		r += m.Multiplier
	}
	return r
}
