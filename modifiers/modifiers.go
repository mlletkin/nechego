package modifiers

import (
	"golang.org/x/exp/slices"
)

var (
	NoModifier            = &Modifier{"", +0.00, "", ""}
	AdminModifier         = &Modifier{"üëë", +0.20, "–í—ã –æ—â—É—â–∞–µ—Ç–µ –≤–ª–∞—Å—Ç—å –Ω–∞–¥ –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏.", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"}
	EblanModifier         = &Modifier{"üò∏", -0.20, "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è –æ—Å–∫–æ—Ä–±–ª–µ–Ω–Ω—ã–º.", "–µ–±–ª–∞–Ω"}
	MuchEnergyModifier    = &Modifier{"üç•", +0.20, "–í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–µ–ª–∏.", ""}
	FullEnergyModifier    = &Modifier{"‚ö°Ô∏è", +0.10, "–í—ã –ø–æ–ª–Ω—ã —Å–∏–ª.", ""}
	NoEnergyModifier      = &Modifier{"üò£", -0.25, "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É—Å—Ç–∞–≤—à–∏–º.", ""}
	TerribleLuckModifier  = &Modifier{"‚ò†Ô∏è", -0.50, "–í–∞—Å –ø—Ä–µ—Å–ª–µ–¥—É—é—Ç –Ω–µ—É–¥–∞—á–∏.", ""}
	BadLuckModifier       = &Modifier{"", -0.10, "–í–∞–º –Ω–µ –≤–µ–∑–µ—Ç.", ""}
	GoodLuckModifier      = &Modifier{"ü§û", +0.10, "–í–∞–º –≤–µ–∑–µ—Ç.", ""}
	ExcellentLuckModifier = &Modifier{"üçÄ", +0.30, "–°–µ–≥–æ–¥–Ω—è –≤–∞—à –¥–µ–Ω—å.", ""}
	RichModifier          = &Modifier{"üé©", +0.05, "–í—ã –±–æ–≥–∞—Ç—ã.", "–º–∞–≥–Ω–∞—Ç"}
	PoorModifier          = &Modifier{"", -0.05, "–í—ã –±–µ–¥–Ω—ã.", ""}
	FisherModifier        = &Modifier{"üé£", +0.05, "–í—ã –º–æ–∂–µ—Ç–µ —Ä—ã–±–∞—á–∏—Ç—å.", ""}
	DebtorModifier        = &Modifier{"üí≥", -0.25, "–£ –≤–∞—Å –µ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç.", ""}
)

type Modifier struct {
	Icon        string
	Multiplier  float64
	Description string
	Title       string
}

type Set []*Modifier

func NewSet() *Set {
	return &Set{}
}

func (s *Set) Present(m *Modifier) bool {
	return slices.Contains(*s, m)
}

func (s *Set) Add(m *Modifier) {
	if slices.Contains(*s, m) {
		return
	}
	if m == NoModifier {
		return
	}
	*s = append(*s, m)
}

func (s *Set) List() []*Modifier {
	return *s
}

func (s *Set) Sum() float64 {
	sum := 0.0
	for _, m := range s.List() {
		sum += m.Multiplier
	}
	return sum
}

func (s *Set) Icons() []string {
	out := []string{}
	for _, m := range s.List() {
		if m.Icon == "" {
			continue
		}
		out = append(out, m.Icon)
	}
	return out
}

func (s *Set) Descriptions() []string {
	out := []string{}
	for _, m := range s.List() {
		out = append(out, m.Description)
	}
	return out
}

func (s *Set) Titles() []string {
	out := []string{}
	for _, m := range s.List() {
		if m.Title == "" {
			continue
		}
		out = append(out, m.Title)
	}
	return out
}
